package me.xiangchen.app.duethandsense;

import java.util.Calendar;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import me.xiangchen.ml.HandSenseClassifier;
import me.xiangchen.ml.xacFeatureMaker;
import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.provider.Settings;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class HandSense extends Activity implements SensorEventListener {

	public final static String[] touchLabels = { "None", "NoWatch", "Watch" };
	public final static int TOUCHONSETTIME = 5; // ms
	int idxHands = 0;
	final public static int PHONEACCELFPS = 50; // Hz
	final int HANDTIMEOUT = 700; // ms

	boolean isRecognition = true;

	LinearLayout layout;
	Button btnHands;
	TextView txtHands;
	int alphaText = 255;

	Timer timer;

	SensorManager sensorManager;
	Sensor sensorAccel;

	long timeTouchDown;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		xacFeatureMaker.setLabel(idxHands);
		xacFeatureMaker.createFeatureTable();

		layout = new LinearLayout(this);
		layout.setBackgroundColor(Color.BLACK);
		layout.setOnTouchListener(new View.OnTouchListener() {
			@Override
			public boolean onTouch(View view, MotionEvent event) {

//				Calendar calendar = Calendar.getInstance();
//				long curTime = calendar.getTimeInMillis();

//				if (event.getAction() == MotionEvent.ACTION_DOWN) {
//					timeTouchDown = curTime;
//					return true;
//				} else {
//					if (curTime - timeTouchDown < TOUCHONSETTIME) {
//						return true;
//					}
//				}

				int numRowsToSend = PHONEACCELFPS * HANDTIMEOUT / 1000;

				if (!isRecognition) {
					if(xacFeatureMaker.sendOffData(numRowsToSend, null,
							touchLabels)) {
					xacFeatureMaker.clearData();
					}
				} else {
					Object[] features = xacFeatureMaker.getFlattenedData(
							numRowsToSend,
							null);
					if (features != null) {
						alphaText = 255;
						try {
							int idxClass = (int) HandSenseClassifier
									.classify(features);
							if (idxClass >= 0) {
								txtHands.setText(touchLabels[idxClass]);
							} else {
								txtHands.setText("Unknown");
							}
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} else {
						txtHands.setText("Wait...");
					}
				}
				return true;
			}
		});

		sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		sensorAccel = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		sensorManager.registerListener(this, sensorAccel,
				SensorManager.SENSOR_DELAY_GAME);

		int widthButton = 500;
		int heightButton = 360;
		btnHands = new Button(this);
		btnHands.setId(0);
		btnHands.layout(0, 0, widthButton, heightButton);

		btnHands.setBackgroundColor(Color.BLACK);
		btnHands.setTextColor(Color.GRAY);

		btnHands.setText(touchLabels[idxHands]);

		btnHands.setTextSize(36);
		btnHands.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				idxHands = (idxHands + 1) % touchLabels.length;
				xacFeatureMaker.setLabel(idxHands);
				btnHands.setText(touchLabels[idxHands]);

			}
		});

		int widthTxtView = 500;
		int heightTxtView = 360;
		txtHands = new TextView(this);
		txtHands.setId(1);
		txtHands.setTextSize(36);
		txtHands.setBackgroundColor(Color.WHITE);
		txtHands.setTextColor(Color.BLACK);
		txtHands.setText("Unknow");
		txtHands.layout(widthButton, 0, widthTxtView, heightTxtView);
		txtHands.setGravity(Gravity.CENTER);

		LinearLayout.LayoutParams paramsButton = new LinearLayout.LayoutParams(
		// RelativeLayout.LayoutParams.WRAP_CONTENT,
		// RelativeLayout.LayoutParams.WRAP_CONTENT);
				widthButton, heightButton);
		// paramsButton.addRule(RelativeLayout.LEFT_OF, 1);
		layout.addView(btnHands, paramsButton);

		LinearLayout.LayoutParams paramsText = new LinearLayout.LayoutParams(
		// RelativeLayout.LayoutParams.WRAP_CONTENT,
		// RelativeLayout.LayoutParams.WRAP_CONTENT, widthButton, 0);
				widthTxtView, heightTxtView);
		// paramsText.addRule(RelativeLayout.RIGHT_OF, 0);
		layout.addView(txtHands, paramsText);

		setContentView(layout);

		timer = new Timer();
		timer.scheduleAtFixedRate(new TimerTask() {
			@Override
			public void run() {
				// Your database code here
				runOnUiThread(new Runnable() {
					@Override
					public void run() {
						// Your database code here
						if (isRecognition) {
							alphaText *= 0.95f;
							txtHands.setTextColor(Color
									.argb(alphaText, 0, 0, 0));
						}
					}
				});
			}
		}, new Date(), 20);

		setAutoOrientationEnabled(getContentResolver(), false);
		setContentView(layout);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.hand_sense, menu);
		return true;
	}

	private void toggleMode() {
		isRecognition = !isRecognition;
		// btnHands.setEnabled(!isRecognition);
		// txtHands.setEnabled(isRecognition);
		alphaText = 255;

		if (isRecognition) {
			Toast.makeText(this, "Recognition mode", Toast.LENGTH_SHORT).show();
			btnHands.setBackgroundColor(Color.BLACK);
			btnHands.setTextColor(Color.BLACK);
			txtHands.setText("Unknown");
			txtHands.setBackgroundColor(Color.WHITE);
			txtHands.setTextColor(Color.BLACK);
		} else {
			Toast.makeText(this, "Training mode", Toast.LENGTH_SHORT).show();
			txtHands.setBackgroundColor(Color.BLACK);
			txtHands.setTextColor(Color.BLACK);
			btnHands.setBackgroundColor(Color.WHITE);
			btnHands.setTextColor(Color.BLACK);
		}
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		switch (keyCode) {
		case KeyEvent.KEYCODE_VOLUME_DOWN:
			toggleMode();
			break;
		}

		return true;
	}

	public static void setAutoOrientationEnabled(ContentResolver resolver,
			boolean enabled) {
		Settings.System.putInt(resolver,
				Settings.System.ACCELEROMETER_ROTATION, enabled ? 1 : 0);
	}

	@Override
	public void onAccuracyChanged(Sensor ssr, int val) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		// TODO Auto-generated method stub
		xacFeatureMaker.updatePhoneAccel(event.values);
		xacFeatureMaker.addPhoneFeatureEntry();
	}
}

package me.xiangchen.app.duetapp.call;

import java.util.Hashtable;

import me.xiangchen.app.duetapp.AppExtension;
import me.xiangchen.app.duetos.LauncherManager;
import me.xiangchen.app.duetos.R;
import me.xiangchen.technique.posturesense.xacPostureSenseFeatureMaker;
import me.xiangchen.technique.sharesense.xacShareSenseFeatureMaker;

import com.sonyericsson.extras.liveware.aef.control.Control;

public class CallExtension extends AppExtension {

	public final static int CONTACT = 0;
	public final static int EMAIL = 1;
	public final static int CALENDAR = 2;

	int posture;
	final String[] appExtensions = { "Contact", "Email", "Calendar" };
	int[] appExtIcons = {R.drawable.contact_small, R.drawable.email_small, R.drawable.calendar_small};
	int idxAppExts = 0;
	Hashtable<String, Integer> htIdxItems;

	int idxInApp = 0;
	String[][][] appScreens;

	String[] emailText = {
			"Nobita Nobi\n Subject: I need a new tool ... \nHey, Doraemon, I need a new tool to help me finish my summer internship project. I need something to help me automatically write application on a",
			"Stephen Chow\nSubject: My films              \nHi, Tony!\nActually, my flims are all tragedies\nDear Anthony, I know you’ve been seeing my films. Just want to point out that actually they are all tragedies, not commedies.",
			"Chan Wing Yan\nSubject: No title             \nGuo zuo tan yai zao mou si la\nDan o, sam yi!",
			"Nobita Nobi\nSubject: I need a new tool ...  \nHey, Doraemon, I need a new tool to help me finish my summer internship project. I need something to help me automatically write application on a"};

	public CallExtension() {

		CallManager.setWatch(this);
		htIdxItems = new Hashtable<String, Integer>();
		for (String appExt : appExtensions) {
			htIdxItems.put(appExt, 0);
		}

		int numApps = appExtensions.length;
		// int numItems = 3;

		appScreens = new String[numApps][][];
		for (int i = 0; i < numApps; i++) {
			switch (i) {
			case CALENDAR:
				appScreens[i] = new String[3][1];
				appScreens[i][0][0] = "9am Group meeting                                ";
				appScreens[i][1][0] = "1pm Conference call (Kevin's skype: kevinminion) ";
				appScreens[i][2][0] = "4pm Dentist's appointment                        ";
				break;
			case EMAIL:
				int numEmails = emailText.length;
				appScreens[i] = new String[numEmails][3];
				for (int j = 0; j < numEmails; j++) {
					// appScreens[i][j] = new String[numPages];
					int numPages = appScreens[i][j].length;
					int numCharPerPage = 60;
					for (int k = 0, start = 0; k < numPages
							&& start < emailText[j].length(); k++, start += numCharPerPage) {
						appScreens[i][j][k] = emailText[j].substring(
								start,
								Math.min(emailText[j].length() - 1, start
										+ numCharPerPage));
					}
				}
				break;
			case CONTACT:
				appScreens[i] = new String[3][1];
				appScreens[i][0][0] = "Nobita Nobi\n+81 939 223\nobinbita@doraemon.org";
				appScreens[i][1][0] = "Kevin the Minion\n+01 492 102\nkevin@despicable.me";
				appScreens[i][2][0] = "Gru the Vilian\n+01 492 100\ngru@despicable.me";
				break;
			}

		}

	}

	@Override
	public void doResume() {
		showText("Call");
	}

	@Override
	public void doAccelerometer(float[] values) {
		xacPostureSenseFeatureMaker.updateWatchAccel(values);
		xacPostureSenseFeatureMaker.addWatchFeatureEntry();
	}

	@Override
	public void doSwipe(int direction) {
		posture = xacPostureSenseFeatureMaker.calculatePosture();
		if (posture != xacPostureSenseFeatureMaker.WATCH) {
			return;
		}

		switch (direction) {
		case Control.Intents.SWIPE_DIRECTION_UP:
			buzz(100);
			CallManager.playLastVoiceMail();
			break;
		case Control.Intents.SWIPE_DIRECTION_DOWN:
			buzz(100);
			CallManager.playNextVoiceMail();
			break;
		}
	}

	public void showAppExtension() {
		// String strAppItem = appExtensions[idxAppExts] + " #"
		// + (htIdxItems.get(appExtensions[idxAppExts]) + 1);
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);

		if (idxItem == 0) {
			updateWatchVisual(
					LauncherManager.getBitmap(appExtIcons[idxAppExts]), false);
		} else {
			String strAppItem = appScreens[idxAppExts][idxItem][0];
			String strAppItemShort = "["
					+ appExtensions[idxAppExts]
					+ "]\n"
					+ strAppItem
							.substring(0, Math.min(strAppItem.length(), 40))
					+ "...";
			showText(strAppItemShort);
		}
	}

	public void nextAppExtension() {
		idxAppExts = (idxAppExts + 1) % appExtensions.length;
		showAppExtension();
	}

	public void lastAppExtension() {
		idxAppExts = (idxAppExts + appExtensions.length - 1)
				% appExtensions.length;
		showAppExtension();
	}

	public void nextItem() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		idxItem++;
		idxItem = Math.min(appScreens[idxAppExts].length, idxItem);
		htIdxItems.put(appExtensions[idxAppExts], idxItem);
		showAppExtension();
	}

	public void lastItem() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		idxItem--;
		idxItem = Math.max(0, idxItem);
		htIdxItems.put(appExtensions[idxAppExts], idxItem);
		showAppExtension();
	}

	public void scrollDownApp() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		idxInApp = Math.min(idxInApp + 1,
				appScreens[idxAppExts][idxItem].length - 1);
		showText(appScreens[idxAppExts][idxItem][idxInApp]);
	}

	public void scrollUpApp() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		idxInApp = Math.max(idxInApp - 1, 0);
		showText(appScreens[idxAppExts][idxItem][idxInApp]);
	}

	public void getOutOfApp() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		htIdxItems.put(appExtensions[idxAppExts], idxItem);
		showAppExtension();
	}

	public void getInApp() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		idxInApp = 0;
		showText(appScreens[idxAppExts][idxItem][idxInApp]);
	}
}

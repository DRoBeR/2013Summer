package me.xiangchen.app.duetapp.email;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.Random;

import me.xiangchen.app.duetapp.App;
import me.xiangchen.app.duetos.Launcher;
import me.xiangchen.app.duetos.LauncherManager;
import me.xiangchen.app.duetos.R;
import me.xiangchen.lib.xacPhoneGesture;
import me.xiangchen.technique.doubleflip.xacAuthenticSenseFeatureMaker;
import me.xiangchen.technique.flipsense.xacFlipSenseFeatureMaker;
import me.xiangchen.technique.handsense.xacHandSenseFeatureMaker;
import me.xiangchen.technique.sharesense.xacShareSenseFeatureMaker;
import me.xiangchen.technique.touchsense.TouchSenseClassifier;
import me.xiangchen.technique.touchsense.xacTouchSenseFeatureMaker;
import me.xiangchen.ui.xacInteractiveCanvas;
import me.xiangchen.ui.xacShape;
import me.xiangchen.ui.xacToast;
import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Log;
import android.view.MotionEvent;
import android.view.MotionEvent.PointerCoords;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class Email extends App {

	public final static String LOGTAG = "DuetOS";
	public final static int WIDTHAPP = 1080;
	public final static int HEIGHTAPP = 1920;
	public final static int WIDTHEMAIL = 1024;
	public final static int DIMMARGIN = (WIDTHAPP - WIDTHEMAIL) / 2;
	public final static int HEIGHTEMAIL = 320;
	public final static int NUMSTARTINGEMAILS = 9;
	public final static int TAPOFFSETTHRES = 25;
	public final static int EMAILNOTIFICATIONTIMEOUT = 1000; //ms

	final static int NUMROWSHANDPARTS = LauncherManager.PHONEACCELFPSGAME
			* xacTouchSenseFeatureMaker.TOUCHTIMEOUT / 1000;
	private static final float APPWIDTH = 1080;

	public final static int EMAILFREQUENCY = 2;

	int cntEmail = 0;

	xacInteractiveCanvas canvas;
	LinearLayout openedEmailLayout;
	LinearLayout.LayoutParams paramsOpened;
	TextView textViewEmail;

	Hashtable<xacShape, String> htEmails;

	float xPrev;
	float yPrev;

	float dScrollX = 0;
	float dScrollY = 0;

	float dTouchX;
	float dTouchY;

	float xTouchDown;
	float yTouchDown;

	ArrayList<xacShape> hitEmails;
	ArrayList<xacShape> allEmails;
	ArrayList<xacShape> unreadEmails;

	int handPart;

	int numTouch;

	Random random;

	xacToast toast;

	Button btnMarkRead;
	Button btnUnselect;
	Button btnDelete;
	ArrayList<Button> buttons;
	RelativeLayout layoutButtons;

	ArrayList<xacShape> selectedEmails;

	xacShape openedEmail;

	int numUnnotifiedEmail = 0;

	int prevWatchMode = xacShareSenseFeatureMaker.PUBLIC;
	int prevNumUnnotified = 0;

	int idxEmail = 0;
	String[] emailTitles = {
			"Super Villian Gru - Next project: stealing the Great Wall",
			"McKinsey & Company - Game changes: Five opportunities for US growth",
			"The Minions Mailing List - Gelato!",
			"The Rolling Stones - Wait for our '60 and counting'",
			"Marshall Eriksen - A video of the AWESOME night!",
			"Denny Crane - Denny Crane. Lock and load.",
			"Chan Wing Yan - Guo zuo tan yai zao mou si la",
			"Stephen Chow - Actually, my flims are all tragedies",
			"Nobita Nobi - I need a new tool ... " };

	String[] emailTexts = {
			"Super Villian Gru - Next project: stealing the Great Wall\nMy Fellow Minions! I have come to realize that we haven’t done a project for a while. I suggest our next goal is to steal the Great Wall from China!",
			"McKinsey & Company - Game changes: Five opportunities for US growth\nThe US economy is struggling to find a new formula for vigorous growth. But all growth opportunities are not created equal.",
			"The Minions Mailing List - Gelato!\nPello, geto gelato. wako lato pero no rah do. Yibalajema! Gelato gapple, gelato banana, gelato chocolato.",
			"The Rolling Stones - Wait for our '60 and counting'\nDear supporters, I hope you had a good time enjoying our “50 and counting” concert series. We just want you know that this is not the finishing line.",
			"Marshall Eriksen - A video of the AWESOME night!\nHi guys, I thought I’d share this piece of incredible video of our last night’s double date. Check out how Lily is making a face!",
			"Denny Crane - Denny Crane. Lock and load.\nDenny Crane. Denny Crane. Denny Crane. Denny Crane. Denny Crane. Denny Crane. Denny Crane. Denny Crane. Denny Crane",
			"Chan Wing Yan - Guo zuo tan yai zao mou si la\nDan o, sam yi!",
			"Stephen Chow - Actually, my flims are all tragedies\nDear Anthony, I know you’ve been seeing my films. Just want to point out that actually they are all tragedies, not commedies.",
			"Nobita Nobi - I need a new tool ... \nHey, Doraemon, I need a new tool to help me finish my summer internship project. I need something to help me automatically write application on a" };
	
	int[] emailSnapshots = { R.drawable.email_snapshot_0,
			R.drawable.email_snapshot_1, R.drawable.email_snapshot_2,
			R.drawable.email_snapshot_3, R.drawable.email_snapshot_4,
			R.drawable.email_snapshot_5, R.drawable.email_snapshot_6,
			R.drawable.email_snapshot_7, R.drawable.email_snapshot_8 };
	
	int[] emailBodies = { R.drawable.email_body_0,
			R.drawable.email_body_1, R.drawable.email_body_2,
			R.drawable.email_body_3, R.drawable.email_body_4,
			R.drawable.email_body_5, R.drawable.email_body_6,
			R.drawable.email_body_7, R.drawable.email_body_8 };
	
	Hashtable<xacShape, String> htEmailText;

	xacPhoneGesture pressAndHold;
	int isHold;

	int handedness = xacHandSenseFeatureMaker.UNKNOWN;
	
	long timeNotified = 0; 

	public Email(Context context) {
		super(context);
		color = xacInteractiveCanvas.fgColorRed;
		appLayout = new RelativeLayout(context);
		title = "Email";

		EmailManager.initGestureManager();
		EmailManager.setPhone(this);

		canvas = new xacInteractiveCanvas(context);
		canvas.setBackgroundColor(xacInteractiveCanvas.bgColorRed);

		openedEmailLayout = new LinearLayout(context);
		openedEmailLayout.setBackgroundColor(xacInteractiveCanvas.fgColorCream);
//		openedEmailLayout.setBackgroundResource(R.drawable.email_body_1);
		textViewEmail = new TextView(context);
		textViewEmail.setTextSize(24);
		textViewEmail.setTextColor(xacInteractiveCanvas.bgColorDark);
		// openedEmailLayout.addView(textViewEmail);
		paramsOpened = new LinearLayout.LayoutParams(
				LinearLayout.LayoutParams.MATCH_PARENT,
				LinearLayout.LayoutParams.MATCH_PARENT);
		openedEmailLayout.setOnTouchListener(new View.OnTouchListener() {
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				appLayout.removeView(openedEmailLayout);
				openedEmail = null;
				return true;
			}
		});

		appLayout.addView(canvas);
		appLayout.setOnTouchListener(new View.OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				doTouch(event);
				return true;
			}
		});
		appLayout.setBackgroundColor(0xFFFFFFFF);

		htEmails = new Hashtable<xacShape, String>();
		htEmailText = new Hashtable<xacShape, String>();
		allEmails = new ArrayList<xacShape>();
		unreadEmails = new ArrayList<xacShape>();
		for (int i = 0; i < NUMSTARTINGEMAILS; i++) {
			addEmail();
			updateInboxVisual();
		}

		random = new Random();
		toast = new xacToast(context);
		toast.setImgSrc(R.drawable.email);

		dispatchButtons(context);
		selectedEmails = new ArrayList<xacShape>();

		pressAndHold = new xacPhoneGesture(xacPhoneGesture.PRESSANDHOLD);

	}

	@Override
	public void runOnUIThread() {
		int watchMode = xacShareSenseFeatureMaker.doClassification();
		long curTime = Calendar.getInstance().getTimeInMillis();
		if ((random.nextInt() + 97) % (Launcher.TIMERFPS * EMAILFREQUENCY) == 0
				&& cntEmail <= 40) {
			// addEmail();
			// updateInboxVisual();

			LauncherManager.showNotificationOnLockedPhone(R.drawable.email);

			if (LauncherManager.isPhoneLocked()) {
				if (watchMode == xacShareSenseFeatureMaker.PRIVATE) {
					LauncherManager.showNotificationOnWatch(
							R.drawable.email_small, true);
				} else {
					LauncherManager.buzz(100);
				}
				
				timeEmailNotified = curTime;
			}
			numUnnotifiedEmail++;
			canvas.invalidate();
		} else {
			if (watchMode == xacShareSenseFeatureMaker.PRIVATE) {
				if(curTime - timeEmailNotified >= EMAILNOTIFICATIONTIMEOUT) {
					String strUnread = unreadEmails.size() + " unread emails";
					LauncherManager.showText(strUnread);
				} 
			} else {
				LauncherManager.showTime();
			}
		}

		prevWatchMode = watchMode;
		prevNumUnnotified = numUnnotifiedEmail;
	}

	private void dispatchButtons(Context context) {
		layoutButtons = new RelativeLayout(context);

		buttons = new ArrayList<Button>();

		btnMarkRead = new Button(context);
		btnMarkRead.setText("Mark as (un)read");
		btnMarkRead.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				for (xacShape email : selectedEmails) {
					// email.setTypeface(LauncherManager
					// .getTypeface(LauncherManager.NORMAL));
					// email.setColor(Color.argb(256, 256, 256, 256));
					email.toggleAlpha();//.setAlpha(200);
				}
				canvas.invalidate();
			}
		});
		// layoutButtons.addView(btnMarkRead);
		buttons.add(btnMarkRead);

		btnDelete = new Button(context);
		btnDelete.setText("Delete");
		btnDelete.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				for (xacShape email : selectedEmails) {
					allEmails.remove(email);
					canvas.remove(email);
					htEmails.remove(email);
				}
				updateInboxVisual();
				selectedEmails.clear();
				appLayout.removeView(layoutButtons);
				canvas.invalidate();

			}
		});
		// layoutButtons.addView(btnDelete);
		buttons.add(btnDelete);

		btnUnselect = new Button(context);
		btnUnselect.setText("Unselect");
		btnUnselect.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				for (xacShape email : selectedEmails) {
					email.toggleStroke();
				}
				selectedEmails.clear();
				appLayout.removeView(layoutButtons);
				canvas.invalidate();
			}
		});
		// layoutButtons.addView(btnUnselect);
		buttons.add(btnUnselect);

		Button btnLast = null;
		int idBtn = 1;
		layoutButtons.setId(1027);
		for (Button btn : buttons) {
			btn.setId(1027 + idBtn);
			btn.setBackgroundColor(xacInteractiveCanvas.fgColorRed);
			btn.setTextColor(0xFFFFFFFF);
			btn.setAlpha(0.85f);
			btn.setTypeface(LauncherManager.getTypeface(LauncherManager.NORMAL));
			btn.setTextSize(20);
			RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(
					360, 240);
			if (idBtn > 1) {
				params.addRule(RelativeLayout.RIGHT_OF, btnLast.getId());
			}
			params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
			layoutButtons.addView(btn, params);
			idBtn++;
			btnLast = btn;
		}

		// appLayout.addView(layoutButtons);
	}

	public void addEmail() {

		xacShape emailEntry = canvas.addShape(xacShape.ITEM, WIDTHEMAIL,
				HEIGHTEMAIL, 0, 0, 0xFFFFFFFF);
		emailEntry.setBitmap(LauncherManager
				.getBitmap(emailSnapshots[idxEmail]));
		// emailEntry.setStrokeColor(xacInteractiveCanvas.fgColorRed);

		emailEntry.setTypeface(LauncherManager
				.getTypeface(LauncherManager.BOLD));
		allEmails.add(emailEntry);
		unreadEmails.add(emailEntry);
		// String titleEmail = ;

		htEmails.put(emailEntry, emailTitles[idxEmail]);
		htEmailText.put(emailEntry, emailTexts[idxEmail]);

		idxEmail = (idxEmail + 1) % emailTitles.length;
		cntEmail++;
	}

	public void updateInboxVisual() {
		int numEmails = allEmails.size();
		for (int i = 0; i < numEmails; i++) {
			float cx = WIDTHAPP / 2;
			float cy = DIMMARGIN * (1 + i) + HEIGHTEMAIL * (i + 0.5f)
					- dScrollY;

			xacShape emailEntry = allEmails.get(numEmails - 1 - i);
			String textEmail = htEmails.get(emailEntry);
			int lenPreview = Math.min(textEmail.length(), 128);
			emailEntry.setText(textEmail.substring(0, lenPreview));

			// emailEntry.setTextColor(xacInteractiveCanvas.bgColorDark);
			emailEntry.setPosition(cx, cy);
		}
	}

	@Override
	public void doAccelerometer(float values[]) {
		xacHandSenseFeatureMaker.updatePhoneAccel(values);
		xacHandSenseFeatureMaker.addPhoneFeatureEntry();

		xacTouchSenseFeatureMaker.updatePhoneAccel(values);
		xacTouchSenseFeatureMaker.addPhoneFeatureEntry();

		xacFlipSenseFeatureMaker.updatePhoneAccel(values);
		xacFlipSenseFeatureMaker.addPhoneFeatureEntry();

		xacAuthenticSenseFeatureMaker.updatePhoneAccel(values);
		xacAuthenticSenseFeatureMaker.addPhoneFeatureEntry();
	}

	@SuppressLint("NewApi")
	@Override
	public void doTouch(MotionEvent event) {
		int action = event.getAction();
		PointerCoords coords = new PointerCoords();
		event.getPointerCoords(0, coords);
		float xCur = coords.x;
		float yCur = coords.y;

		Calendar calendar = Calendar.getInstance();
		long curTime = calendar.getTimeInMillis();

		switch (action) {
		case MotionEvent.ACTION_DOWN:
			isHold = xacPhoneGesture.NO;
			isHold = pressAndHold.update(event);

			appLayout.removeView(openedEmailLayout);
			hitEmails = canvas.getTouchedShapes(xCur, yCur);
			dTouchX = 0;
			dTouchY = 0;

			handPart = calculateHandPart(new double[] { event.getSize(0) });

			xTouchDown = coords.x;
			yTouchDown = coords.y;

			handedness = xacHandSenseFeatureMaker.UNKNOWN;
//			if (handedness == xacHandSenseFeatureMaker.UNKNOWN) {
//				handedness = xacHandSenseFeatureMaker.calculateHandedness();
//				Log.d(LOGTAG, handedness == xacHandSenseFeatureMaker.NOWATCH ? "no watch" : "watch");
//			}

			break;
		case MotionEvent.ACTION_MOVE:
			dTouchX += Math.abs(xCur - xPrev);
			dTouchY += Math.abs(yCur - yPrev);
			
			if (isHold != xacPhoneGesture.YES) {
				isHold = pressAndHold.update(event);
			}

			if (handedness == xacHandSenseFeatureMaker.UNKNOWN) {
				handedness = xacHandSenseFeatureMaker.calculateHandedness();
				xacHandSenseFeatureMaker.clearData();
				Log.d(LOGTAG, handedness == xacHandSenseFeatureMaker.NOWATCH ? "no watch" : "watch");
			}

			else {
				if((handedness == xacHandSenseFeatureMaker.WATCH && handPart != xacTouchSenseFeatureMaker.KNUCKLE)
						|| handedness == xacHandSenseFeatureMaker.NOWATCH) {
					float speedRatio = 0.75f;
					float dy = (yCur - yPrev) * speedRatio;

					float dx = (xCur - xPrev) * 50;
					dy *= Math.max(0, 1 - Math.abs(dx) / APPWIDTH);

					if (dScrollY + (-dy) < 0) {
						dy *= 0.001f;
					}
					dScrollY += (-dy);
					// Log.d(LOGTAG, "scroll by " + dy);

					// canvas.scrollContentsBy(0, dy);
					canvas.setOffsets(0, dy * 1.5f);

					canvas.invalidate();
					dScrollY = Math.max(0, dScrollY);
				}
			}
			
//			switch (handPart) {
//			case xacTouchSenseFeatureMaker.KNUCKLE:
//				break;
//			case xacTouchSenseFeatureMaker.PAD:
//			case xacTouchSenseFeatureMaker.SIDE:
//			default:
//				float speedRatio = 0.75f;
//				float dy = (yCur - yPrev) * speedRatio;
//
//				float dx = (xCur - xPrev) * 50;
//				dy *= Math.max(0, 1 - Math.abs(dx) / APPWIDTH);
//
//				if (dScrollY + (-dy) < 0) {
//					dy *= 0.001f;
//				}
//				dScrollY += (-dy);
//				// Log.d(LOGTAG, "scroll by " + dy);
//
//				// canvas.scrollContentsBy(0, dy);
//				canvas.setOffsets(0, dy * 1.5f);
//
//				canvas.invalidate();
//				dScrollY = Math.max(0, dScrollY);
//
//				break;
//
//			}
			break;
		case MotionEvent.ACTION_UP:
			if (isHold == xacPhoneGesture.YES) {
				int watchConfig = xacAuthenticSenseFeatureMaker
						.calculateAuthentication();
				LauncherManager.updateWatchConfig(watchConfig);
				break;
			}

			if (Math.abs(dTouchX) < TAPOFFSETTHRES
					&& Math.abs(dTouchY) < TAPOFFSETTHRES) {
				for (xacShape hitEmail : hitEmails) {
					// hitEmail.toggleStroke();
					switch (handPart) {
					case xacTouchSenseFeatureMaker.KNUCKLE:
						if (handedness != xacHandSenseFeatureMaker.NOWATCH
								&& LauncherManager.getWatchConfig() == xacAuthenticSenseFeatureMaker.LEFTBACKWRIST
								|| LauncherManager.getWatchConfig() == xacAuthenticSenseFeatureMaker.LEFTBACKWRISTNOPHONE) {
							if (selectedEmails.contains(hitEmail)) {
								selectedEmails.remove(hitEmail);
								if (selectedEmails.size() <= 0) {
									appLayout.removeView(layoutButtons);
								}
							} else {
								if (selectedEmails.size() <= 0) {
									appLayout.addView(layoutButtons);
								}
								selectedEmails.add(hitEmail);
							}
							hitEmail.setStrokeColor(xacInteractiveCanvas.fgColorRed);
							hitEmail.toggleStroke(20);
							canvas.invalidate();
							break;
						}
						else {
							LauncherManager.doAndriodToast("no watch"); 
						}
					case xacTouchSenseFeatureMaker.PAD:
					case xacTouchSenseFeatureMaker.SIDE:
					default:
						String titleEmail = htEmails.get(hitEmail);
						String textEmail = htEmailText.get(hitEmail);
						// textViewEmail.setTypeface(LauncherManager.getTypeface(LauncherManager.BOLD));
						textViewEmail.setText(titleEmail + "\n" + textEmail);
						appLayout.addView(openedEmailLayout, paramsOpened);
						int idxOpenedEmail = allEmails.indexOf(hitEmail);
						try {
							openedEmailLayout.setBackgroundResource(emailBodies[idxOpenedEmail]);
						} catch(Exception e) {
							LauncherManager.doAndriodToast("your email cannot be loaded.");
						}
						unreadEmails.remove(hitEmail);
						// hitEmail.setTypeface(LauncherManager
						// .getTypeface(LauncherManager.NORMAL));
						hitEmail.setAlpha(255 - xacShape.DEFAULTALPHA);
						openedEmail = hitEmail;

						break;
					}
				}
			} else {
				if (coords.x < xTouchDown && coords.y > yTouchDown) {
					// Log.d(LOGTAG, "swipe close");
					EmailManager.updatePhoneGesture(EmailManager.SWIPECLOSE,
							curTime);
				} else if (coords.x > xTouchDown && coords.y < yTouchDown) {
					// Log.d(LOGTAG, "swipe open");
					EmailManager.updatePhoneGesture(EmailManager.SWIPEOPEN,
							curTime);
				}
				canvas.setOffsets(0, 0);
			}
			
			break;
		}

		xPrev = xCur;
		yPrev = yCur;
	}

	private int calculateHandPart(double[] extras) {
		int label = xacTouchSenseFeatureMaker.UNKNOWN;

		Object[] features = xacTouchSenseFeatureMaker.getFlattenedData(
				NUMROWSHANDPARTS, extras);
		int idxClass = -1;
		try {
			idxClass = (int) TouchSenseClassifier.classify(features);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		switch (idxClass) {
		case 0:
			label = xacTouchSenseFeatureMaker.PAD;
			// Log.d(LOGTAG, "pad");
			break;
		case 1:
			label = xacTouchSenseFeatureMaker.SIDE;
			// Log.d(LOGTAG, "side");
			break;
		case 2:
			label = xacTouchSenseFeatureMaker.KNUCKLE;
			// Log.d(LOGTAG, "knuckle");
			break;
		}

		return label;
	}

	@Override
	public String getSup() {
		int cntUnread = unreadEmails.size();
		if (cntUnread > 0) {
			sup =htEmailText.get(unreadEmails.get(cntUnread - 1));
		} else {
			sup = "Inbox zero :)";
		}
		return sup;
	}
}

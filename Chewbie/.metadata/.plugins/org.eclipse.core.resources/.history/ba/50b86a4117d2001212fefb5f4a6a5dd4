package me.xiangchen.app.accelonwatch;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Calendar;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.os.AsyncTask;
import android.util.Log;
import android.view.Gravity;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.sonyericsson.extras.liveware.aef.control.Control;
import com.sonyericsson.extras.liveware.aef.sensor.Sensor;
import com.sonyericsson.extras.liveware.extension.util.control.ControlExtension;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensor;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensorEvent;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensorEventListener;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensorException;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensorManager;

public class AccelOnWatchExtension extends ControlExtension {
	
	final int NUMACCELAXES = 3;
	final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;
	
	AccessorySensor sensor = null;
	AccessorySensorEventListener listener;
	LinearLayout layout;
	TextView[] textViews;
	String[] namesVars;
	
	int width;
	int height;
	
	Canvas canvas;
	Bitmap bitmap;
	
	int fps = 0;
	long timePrev = -1;
	
	public AccelOnWatchExtension(Context context, String hostAppPackageName) {
		super(context, hostAppPackageName);
		width = getSupportedControlWidth(context);
		height = getSupportedControlHeight(context);
		
		AccessorySensorManager manager = new AccessorySensorManager(context, hostAppPackageName);
        sensor = manager.getSensor(Sensor.SENSOR_TYPE_ACCELEROMETER);
		listener = new AccessorySensorEventListener() {

	        public void onSensorEvent(AccessorySensorEvent sensorEvent) {
	        	float[] values = sensorEvent.getSensorValues();
//	            streamSensorData(values);
	            updateFPS();
	            updateDisplay(values);
	        }
	    };
	    
	    layout = new LinearLayout(context);
	    textViews = new TextView[NUMACCELAXES + 1];
	    namesVars = new String[]{"X", "Y", "Z", "FPS"};
	    for(int i=0; i<textViews.length; i++) {
	    	textViews[i] = new TextView(context);
	    	textViews[i].setTextSize(30 / textViews.length);
	    	textViews[i].setTextColor(Color.WHITE);
	    	textViews[i].layout(0, height * i / NUMACCELAXES, 
	    			width, height * (i+1) / NUMACCELAXES);
	    	textViews[i].setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
	    	layout.addView(textViews[i]);
	    }
	}
	
	@Override
    public void onResume() {
        Log.d(SampleExtensionService.LOG_TAG, "Starting control");
        // Note: Setting the screen to be always on will drain the accessory
        // battery. It is done here solely for demonstration purposes
        setScreenState(Control.Intents.SCREEN_STATE_ON);

        // Start listening for sensor updates.
        if (sensor != null) {
            try {
            	sensor.registerInterruptListener(listener);
            } catch (AccessorySensorException e) {
                Log.d(SampleExtensionService.LOG_TAG, "Failed to register listener");
            }
        }
    }
	
	@Override
    public void onPause() {
        // Stop sensor
        if (sensor != null) {
        	sensor.unregisterListener();
        }
    }

    @Override
    public void onDestroy() {
        // Stop sensor
        if (sensor != null) {
        	sensor.unregisterListener();
        	sensor = null;
        }
    }

	public static int getSupportedControlWidth(Context context) {
        return context.getResources().getDimensionPixelSize(R.dimen.smart_watch_control_width);
    }


    public static int getSupportedControlHeight(Context context) {
        return context.getResources().getDimensionPixelSize(R.dimen.smart_watch_control_height);
    }
    
    private void streamSensorData(float[] values) {
    	
    	new NetworkTask().execute(
    			String.format("%.1f, %.1f, %.1f", values[0], values[1], values[2]));
    }
    
    private void updateFPS() {
    	Calendar lCDateTime = Calendar.getInstance();
        long timeCurr =  lCDateTime.getTimeInMillis();
    	if(timePrev >= 0) {
    		if(timeCurr - timePrev >= 1000) {
    			int idxFPS = (NUMACCELAXES + 1) - 1;
    			textViews[idxFPS].setText(namesVars[idxFPS] + ": " + fps);
    			
    			timePrev = timeCurr;
    			fps = 0;
    		}
    	}
    	else {
    		timePrev = timeCurr;
    	}
    	
    	fps++;
    }
    
    private void updateDisplay(float[] values) {
    	for(int i=0; i<NUMACCELAXES; i++) {
    		textViews[i].setText(namesVars[i] + ": " + String.format("%.1f", values[i]));
    	}
    	
    	bitmap = Bitmap.createBitmap(width, height, BITMAP_CONFIG);
		canvas = new Canvas(bitmap);
    	layout.draw(canvas);
    	showBitmap(bitmap);
    }
    
	class NetworkTask extends AsyncTask<String, Void, Void> {
		final static String ipToSend = "10.142.224.68";

		@Override
		protected Void doInBackground(String... arg0) {
			// TODO Auto-generated method stub
			DatagramSocket clientSocket;
			try {
				clientSocket = new DatagramSocket();
				InetAddress IPAddress = InetAddress.getByName(ipToSend);
				byte[] sendData = new byte[1024];
				byte[] receiveData = new byte[1024];
				String sentence = (String) arg0[0];
				sendData = sentence.getBytes();
				DatagramPacket sendPacket = new DatagramPacket(sendData,
						sendData.length, IPAddress, 1027);
				// Log.d("UDP Android", sentence + ": " + sendData.length);
				clientSocket.send(sendPacket);
				DatagramPacket receivePacket = new DatagramPacket(receiveData,
						receiveData.length);
				clientSocket.receive(receivePacket);
				String modifiedSentence = new String(receivePacket.getData());
				System.out.println("FROM SERVER:" + modifiedSentence);
				clientSocket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return null;
		}

	}
}

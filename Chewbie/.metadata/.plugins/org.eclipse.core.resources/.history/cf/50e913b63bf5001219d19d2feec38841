package me.xiangchen.ui;

import java.util.ArrayList;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PixelFormat;
import android.graphics.PorterDuff;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;

public class xacSketchCanvas extends SurfaceView implements
		SurfaceHolder.Callback {

	public static final int NONE = -1;
	public static final int PEN = 0;
	public static final int HIGHLIGHTER = 1;
	public static final int ERASER = 2;

	public static final String LOGTAG = "DuetOS";
	SketchThread thread;
	Path path;
	Path pathOffSet;
	Paint paint;
	private ArrayList<Path> paths = new ArrayList<Path>();
	boolean isStroking = false;

	xacBufferCanvas clientCanvas;

	float dx = 0;
	float dy = 0;

	int tool;

	public xacSketchCanvas(Context context) {
		super(context);
		setDefaultPaint();
		getHolder().addCallback(this);
		this.setZOrderOnTop(true);
		getHolder().setFormat(PixelFormat.TRANSLUCENT);
		setFocusable(true);
	}

	public void setScrollOffsets(float dx, float dy) {
		this.dx += dx;
		this.dy -= dy;
	}

	public void setClientCanvas(xacBufferCanvas bufCan) {
		clientCanvas = bufCan;
		if (clientCanvas != null) {
			clientCanvas.setPathPaint(paint);
		}
	}

	@Override
	public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3) {
		// TODO Auto-generated method stub

	}

	@Override
	public void surfaceCreated(SurfaceHolder arg0) {
		// TODO Auto-generated method stub
		thread = new SketchThread(getHolder(), this);
		thread.setRunning(true);
		thread.start();

		Log.d(LOGTAG, "surface created!");
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder arg0) {
		// TODO Auto-generated method stub
		boolean retry = true;
		thread.setRunning(false);
		while (retry) {
			try {
				thread.join();
				retry = false;
			} catch (InterruptedException e) {
				// Log.e("DuetOS", "Thread join exception!");
			}
		}
		// Log.d("DuetOS", "Thread join successful!");
	}

	@Override
	public void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);

		// draw those updated and stored
		// for (Path path : paths) {
		// canvas.drawPath(path, paint);
		// }

		// draw those that are not
		if (isStroking) {
			canvas.drawPath(path, paint);
		}
	}

	// @Override
	// public boolean onTouchEvent(MotionEvent event) {
	public boolean doTouch(MotionEvent event) {
		if (thread == null) {
			thread = new SketchThread(getHolder(), this);
			thread.setRunning(true);
			thread.start();
		}
		synchronized (thread.getSurfaceHolder()) {
			float x = event.getX();
			float y = event.getY();

			if (event.getAction() == MotionEvent.ACTION_DOWN) {

			} else if (event.getAction() == MotionEvent.ACTION_MOVE) {
				if (!isStroking) {
					isStroking = true;
					path = new Path();
					pathOffSet = new Path();
					// update the starting point of the new path
					path.moveTo(x, y);
					pathOffSet.moveTo(x - dx, y - dy);
					// path.lineTo(event.getX(), event.getY());
				}
				// draw to the new point
				path.lineTo(x, y);
				pathOffSet.lineTo(x - dx, y - dy);
			} else if (event.getAction() == MotionEvent.ACTION_UP) {
				// last drawing
				if (path != null) {
					path.lineTo(x, y);
					pathOffSet.lineTo(x - dx, y - dy);
					// not updating until now
					paths.add(path);
					if (clientCanvas != null) {
						clientCanvas.addPath(pathOffSet, paint);
						clientCanvas.invalidate();
					}
					isStroking = false;
				}
			}

			return true;
		}
	}

	private void setDefaultPaint() {
		paint = new Paint();
		paint.setDither(true);
		setTool(PEN);
	}

	public void setTool(int t) {
		tool = t;

		switch (tool) {
		case PEN:
			paint.setColor(0xAAFF0000);
			paint.setStyle(Paint.Style.STROKE);
			paint.setStrokeJoin(Paint.Join.ROUND);
			paint.setStrokeCap(Paint.Cap.ROUND);
			paint.setStrokeWidth(15);
			break;
		case HIGHLIGHTER:
			paint.setColor(0x44FFFF00);
			paint.setStyle(Paint.Style.STROKE);
			paint.setStrokeJoin(Paint.Join.BEVEL);
			paint.setStrokeCap(Paint.Cap.SQUARE);
			paint.setStrokeWidth(75);
			break;
		case ERASER:
			paint.setColor(0x00000000);
			paint.setStyle(Paint.Style.STROKE);
			paint.setStrokeJoin(Paint.Join.ROUND);
			paint.setStrokeCap(Paint.Cap.ROUND);
			paint.setStrokeWidth(100);
			break;
		}
	}

	public int getTool() {
		return tool;
	}

	public void setIsStroking(boolean flag) {
		isStroking = flag;
	}

	class SketchThread extends Thread {
		private SurfaceHolder surfaceHolder;
		private xacSketchCanvas canvas;
		private boolean isRunning = false;

		public SketchThread(SurfaceHolder surfaceHolder, xacSketchCanvas canvas) {
			this.surfaceHolder = surfaceHolder;
			this.canvas = canvas;
		}

		public void setRunning(boolean run) {
			isRunning = run;
		}

		public SurfaceHolder getSurfaceHolder() {
			return surfaceHolder;
		}

		@SuppressLint("WrongCall")
		@Override
		public void run() {
			Canvas c;
			while (isRunning) {
				c = null;
				try {
					// obtain the canvas to draw
					c = surfaceHolder.lockCanvas(null);
					synchronized (surfaceHolder) {
						if (c != null) {
							canvas.onDraw(c);
						}
					}
				} finally {
					// do this in a finally so that if an exception is thrown
					// during the above, we don't leave the Surface in an
					// inconsistent state
					if (c != null) {
						// post the drawn canvas
						surfaceHolder.unlockCanvasAndPost(c);
					}
				}
			}
		}
	}

}

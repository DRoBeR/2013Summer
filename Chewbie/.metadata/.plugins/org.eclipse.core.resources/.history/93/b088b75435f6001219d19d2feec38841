package me.xiangchen.technique.bumpsense;

import java.util.Calendar;

import me.xiangchen.app.duetos.LauncherExtension;
import me.xiangchen.app.duetos.LauncherManager;
import me.xiangchen.lib.xacAccelerometer;
import me.xiangchen.network.xacUDPTask;
import me.xiangchen.technique.flipsense.xacFlipSenseFeatureMaker;
import android.util.Log;

public class xacBumpSenseFeatureMaker {

	public final static int UNKNOWN = 0;
	public final static int DOING = 1;
	public final static int NOTDOING = 2;
	
	public final static String LOGTAG = "DuetOS";
	public final static int BUMP = 0;
	public final static int NOBUMP = 1;
	
	public final static float TAPTHRS = 200;
	public final static int  HOLDTIMEOUT = 750; // ms
	
	public final static int PHONEAUTHENDURATION = 1000; // ms
	public final static int NUMROWPHONEAUTHEN = LauncherManager.PHONEACCELFPSGAME
			* PHONEAUTHENDURATION / 1000;

	static final int MAXNUMROW = 256;
	static final int NUMSOURCES = 2;

	static String[] featureNames = null;
	static double[][] featureTablePhone = null;
	static double[][] featureTableWatch = null;
	static int pntrEntryPhone = 0;
	static int pntrEntryWatch = 0;
	static int numFeatures = 0;
	static String tag = "FeatureMaker";
	static int label = -1;

	static xacAccelerometer accelWatch;
	static xacAccelerometer accelPhone;
	static xacAccelerometer[] accels;
	
	static float distX;
	static float distY;
	
	static float prevX;
	static float prevY;
	
	static long timeTouchDown;
	
	static int configStatus;

	/**
	 * create a table of features, including the first row (the names of the
	 * attributes)
	 */
	public static void createFeatureTable() {
		numFeatures = xacAccelerometer.NUMACCELAXES;
		featureTablePhone = new double[MAXNUMROW][numFeatures + 1];
		featureTableWatch = new double[MAXNUMROW][numFeatures + 1];
		pntrEntryPhone = 0;
		pntrEntryWatch = 0;

		accelWatch = new xacAccelerometer();
		accelPhone = new xacAccelerometer();
		accels = new xacAccelerometer[] { accelWatch, accelPhone };
	}

	/**
	 * add a row in the feature table
	 * 
	 * @param features
	 * @param val
	 */
	public static void addPhoneFeatureEntry() {
		if (pntrEntryPhone >= MAXNUMROW) {
			pntrEntryPhone = 0;
		}

		int idxFeat = 0;
		// for (int i = 0; i < NUMSOURCES; i++) {
		featureTablePhone[pntrEntryPhone][idxFeat++] = accelPhone.getX();
		featureTablePhone[pntrEntryPhone][idxFeat++] = accelPhone.getY();
		featureTablePhone[pntrEntryPhone][idxFeat++] = accelPhone.getZ();
		// }

		// featureTable[pntrEntry][numFeatures] = label;

		// Log.d(tag, "The " + (pntrEntry+1) + "th entry added");
		pntrEntryPhone++;
	}

	public static void addWatchFeatureEntry() {
		if (pntrEntryWatch >= MAXNUMROW) {
			pntrEntryWatch = 0;
		}

		int idxFeat = 0;
		// for (int i = 0; i < NUMSOURCES; i++) {
		featureTableWatch[pntrEntryWatch][idxFeat++] = accelWatch.getX();
		featureTableWatch[pntrEntryWatch][idxFeat++] = accelWatch.getY();
		featureTableWatch[pntrEntryWatch][idxFeat++] = accelWatch.getZ();
		// }

		// featureTable[pntrEntry][numFeatures] = label;

		// Log.d(tag, "The " + (pntrEntry+1) + "th entry added");
		pntrEntryWatch++;
	}

	public static void setLabel(int lb) {
		label = lb;
	}

	public static void updateWatchAccel(float[] values) {
		if (accelWatch == null)
			return;
		accelWatch.update(values[0], values[1], values[2]);
	}

	public static void updatePhoneAccel(float[] values) {
		if (accelPhone == null)
			return;
		accelPhone.update(values[0], values[1], values[2]);
	}

	public static void sendOffData(int numToSend, String[] classLabels) {
		int lockedPntrEntryPhone = pntrEntryPhone;
		int lockedPntrEntryWatch = pntrEntryWatch;
		int numToSendPhone = numToSend;
		int numToSendWatch = numToSendPhone * LauncherExtension.WATCHACCELFPS
				/ LauncherManager.PHONEACCELFPSGAME;

		if (label < 0 || numToSendPhone > lockedPntrEntryPhone
				|| numToSendWatch > lockedPntrEntryWatch)
			return;

		String strFeatureRow = "";

		// 1. the phone's
		for (int i = lockedPntrEntryPhone - numToSendPhone; i < lockedPntrEntryPhone; i++) {
			for (int j = 0; j < numFeatures; j++) {
				strFeatureRow += String.format("%.1f", featureTablePhone[i][j])
						+ ",";
			}
		}

		// 2. the watch's
		for (int i = lockedPntrEntryWatch - numToSendWatch; i < lockedPntrEntryWatch; i++) {
			for (int j = 0; j < numFeatures; j++) {
				strFeatureRow += String.format("%.2f", featureTableWatch[i][j])
						+ ",";
			}
		}

		strFeatureRow += classLabels[label] + '\0';

		new xacUDPTask().execute(strFeatureRow);
	}

	public static Object[] getFlattenedData(int numToSend) {
		int lockedPntrEntryPhone = pntrEntryPhone;
		int lockedPntrEntryWatch = pntrEntryWatch;
		int numToSendPhone = numToSend;
		int numToSendWatch = numToSendPhone * LauncherExtension.WATCHACCELFPS
				/ LauncherManager.PHONEACCELFPSGAME;

		if (numToSendPhone > lockedPntrEntryPhone
				|| numToSendWatch > lockedPntrEntryWatch)
			return null;

		Object[] flattened = new Object[(numToSendPhone + numToSendWatch)
				* numFeatures];
		int idxFeature = 0;

		// 1. the phone's
		for (int i = lockedPntrEntryPhone - numToSendPhone; i < lockedPntrEntryPhone; i++) {
			for (int j = 0; j < numFeatures; j++) {
				flattened[idxFeature++] = featureTablePhone[i][j];
			}
		}

		// 2. the watch's
		for (int i = lockedPntrEntryWatch - numToSendWatch; i < lockedPntrEntryWatch; i++) {
			for (int j = 0; j < numFeatures; j++) {
				flattened[idxFeature++] = featureTableWatch[i][j];
			}
		}

		return flattened;
	}

	public static void clearData() {
		featureTablePhone = new double[MAXNUMROW][numFeatures + 1];
		featureTableWatch = new double[MAXNUMROW][numFeatures + 1];
		pntrEntryPhone = 0;
		pntrEntryWatch = 0;
	}

	public static int calculateBumping() {
		int label = NOBUMP;

		Object[] features = getFlattenedData(NUMROWPHONEAUTHEN);

		int idxClass = -1;
		try {
			idxClass = (int) BumpSenseClassifier.classify(features);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			LauncherManager.doAndriodToast("cannot get features");
		}

		switch (idxClass) {
		case 0:
			label = NOBUMP;
			 Log.d(LOGTAG, "left back wrist");
			break;
		case 1:
			label = BUMP;
			 Log.d(LOGTAG, "left inner wrist");
			break;
		}

		xacFlipSenseFeatureMaker.clearData();
		return label;
	}
	
	public static void initTouch(float x, float y) {
		Calendar calendar = Calendar.getInstance();
		long curTime = calendar.getTimeInMillis();
		timeTouchDown = curTime;
		
		configStatus = UNKNOWN;
		
		distX = 0;
		distY = 0;
		
		prevX = x;
		prevY = y;
	}
	
	public static void isAHold(float x, float y) {
		Calendar calendar = Calendar.getInstance();
		long curTime = calendar.getTimeInMillis();
		
		distX += Math.abs(x - prevX);
		distY += Math.abs(y - prevY);
		
		prevX = x;
		prevY = y;
		
		if(curTime - timeTouchDown < HOLDTIMEOUT) {
			configStatus = UNKNOWN;
			return;
		}
		
		if (Math.max(distX, distY) < TAPTHRS) {
			configStatus = DOING;
		} else {
			configStatus = NOTDOING;
		}
	}
	
	public static int getConfigStatus() {
		return configStatus;
	}

}

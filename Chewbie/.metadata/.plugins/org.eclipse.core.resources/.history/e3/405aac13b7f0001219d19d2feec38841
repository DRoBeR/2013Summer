package me.xiangchen.app.duetapp.map;

import java.util.ArrayList;
import java.util.Random;

import me.xiangchen.app.duetapp.App;
import me.xiangchen.app.duetos.R;
import me.xiangchen.lib.xacPhoneGesture;
import me.xiangchen.technique.tiltsense.xacTiltSenseFeatureMaker;
import me.xiangchen.ui.xacInteractiveCanvas;
import me.xiangchen.ui.xacShape;
import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Log;
import android.view.MotionEvent;
import android.view.MotionEvent.PointerCoords;
import android.view.View;
import android.widget.ImageView;
import android.widget.RelativeLayout;

@SuppressLint("NewApi")
public class Map extends App {

	public final static String LOGTAG = "DuetOS";
	public final static float EPS = 0.0001f;
	public final static int WIDTH = 1080;
	public final static int HEIGHT = 1920;
	public final static int XCENTER = WIDTH / 2;
	public final static int YCENTER = HEIGHT / 2;
	public final static int NUMTARGETS = 100;
	public final static float DIMTARGET = 25;
	public final static int SELECTRATIO = 3;
	public final static int SHIFTWIDTH = 64;
	public final static int SHIFTHEIGHT = 64;
	public final static float SCALERATE = 1.0f;
	public final static float TRANSLATERATE = 0.5f;
	public final static float INITMAPSCALE = 1.0f;
	public final static float TAPTHRS = 50;

	xacInteractiveCanvas canvas;

	static Random random = new Random();

	float xTouchDown;
	float yTouchDown;

	int numTouches;

	float pinchDist = 0;
	float zoomFactor = INITMAPSCALE;
	float xOffset = 0;
	float yOffset = 0;

	float zoomCenterX = 0;
	float zoomCenterY = 0;

	RelativeLayout mapLayout;

	float xPrev;
	float yPrev;
	float distX;
	float distY;
	
	int idxMapViews = 1;
	int[] mapViews = {R.drawable.map_n, R.drawable.map_s};
	
	ImageView mapView;
	ImageView mapViewNormal;
	ImageView mapViewSatellite;
	
	xacPhoneGesture doubleTap;
	xacPhoneGesture pressAndHold;
	
	boolean isTiltInputOn = false;

	public Map(Context context) {
		super(context);
		color = 0xFF2D3E50;

		MapManager.setPhone(this);

		appLayout = new RelativeLayout(context);
		mapLayout = new RelativeLayout(context);
		
		mapViewNormal = new ImageView(context);
		mapViewNormal.setImageResource(mapViews[0]);
		
		mapViewSatellite = new ImageView(context);
		mapViewSatellite.setImageResource(mapViews[1]);

		mapView = mapViewNormal;
		mapView.setId(1026);

		canvas = new xacInteractiveCanvas(context);
		canvas.setBackgroundColor(0x00000000);
		for (int i = 0; i < NUMTARGETS; i++) {
			float cx = random.nextInt(WIDTH);
			float cy = random.nextInt(HEIGHT);
			int color = random.nextInt() % SELECTRATIO == 0 ? xacInteractiveCanvas.fgColorGreen
					: xacInteractiveCanvas.fgColorRed;
			xacShape marker = canvas.addShape(xacShape.OVAL, DIMTARGET,
					DIMTARGET, cx, cy, color);
			marker.setStrokeColor(0xFF000000);
		}
		
		canvas.setId(1025);

		// paramsMap.addRule(RelativeLayout.BELOW, canvas.getId());
		
		RelativeLayout.LayoutParams paramsMap = new RelativeLayout.LayoutParams(
				HEIGHT, HEIGHT);
		mapLayout.addView(mapView, paramsMap);
		// paramsCanvas.addRule(RelativeLayout.ABOVE, mapView.getId());
		RelativeLayout.LayoutParams paramsCanvas = new RelativeLayout.LayoutParams(
				HEIGHT, HEIGHT);
		mapLayout.addView(canvas, paramsCanvas);

		mapLayout.setScaleX(zoomFactor);
		mapLayout.setScaleY(zoomFactor);

		mapLayout.setOnTouchListener(new View.OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if(doubleTap.update(event) == xacPhoneGesture.YES) {
					zoomCenterX = mapView.getWidth() / 2;
					zoomCenterY = mapView.getHeight() / 2;

					zoomFactor += 0.75 * SCALERATE;
					zoomFactor = Math.max(1.0f, zoomFactor);

					mapLayout.setScaleX(zoomFactor);
					mapLayout.setScaleY(zoomFactor);
				}
				
				isTiltInputOn = false;
				if(pressAndHold.update(event) == xacPhoneGesture.YES) {
					isTiltInputOn = true;
				}
				
				doTouch(event);
				return true;
			}
		});

//		RelativeLayout.LayoutParams paramsMapLayout = new RelativeLayout.LayoutParams(
//				RelativeLayout.LayoutParams.MATCH_PARENT,
//				RelativeLayout.LayoutParams.MATCH_PARENT);
		appLayout.addView(mapLayout);
		appLayout.setBackgroundColor(0xFF000000);
		
		doubleTap = new xacPhoneGesture(xacPhoneGesture.DOUBLETAP);
		pressAndHold = new xacPhoneGesture(xacPhoneGesture.PRESSANDHOLD);

	}

	@Override
	public void runOnUIThread() {
		if(isTiltInputOn) {
			int tilt = xacTiltSenseFeatureMaker.calculateTilting();
			if(tilt == xacTiltSenseFeatureMaker.TILTOUT) {
				zoomCenterX = mapView.getWidth() / 2;
				zoomCenterY = mapView.getHeight() / 2;

				zoomFactor += -0.05 * SCALERATE;
				zoomFactor = Math.max(1.0f, zoomFactor);

				mapLayout.setScaleX(zoomFactor);
				mapLayout.setScaleY(zoomFactor);
			}
		}
	}
	
	public void doSelection(float xRatio, float yRatio) {
		float dx = SHIFTWIDTH * xRatio;
		float dy = SHIFTHEIGHT * yRatio;
		selectTarget(xTouchDown + dx, yTouchDown + dy);

	}

	private void selectTarget(float x, float y) {
		ArrayList<xacShape> shapes = canvas.getTouchedShapes(x, y);
		for (xacShape shape : shapes) {
			shape.toggleStroke();
		}
		canvas.invalidate();
		MapManager.shift(mapLayout, xTouchDown, yTouchDown, SHIFTWIDTH,
				SHIFTHEIGHT);
	}

	public void doTouch(MotionEvent event) {
		int action = event.getAction();
		numTouches = Math.max(numTouches, event.getPointerCount());

		PointerCoords tchPnt0 = new PointerCoords();
		event.getPointerCoords(0, tchPnt0);
		float x0 = tchPnt0.x;
		float y0 = tchPnt0.y;

		float x1 = x0;
		float y1 = y0;
		if (event.getPointerCount() > 1) {
			PointerCoords tchPnt1 = new PointerCoords();
			event.getPointerCoords(1, tchPnt1);
			x1 = tchPnt1.x;
			y1 = tchPnt1.y;
		}

		float dist = (float) Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1)
				* (y0 - y1));

		switch (action) {
		case MotionEvent.ACTION_DOWN:
			xTouchDown = x0;
			yTouchDown = y0;
			if (numTouches > 1) {
				pinchDist = dist;
			}
			zoomCenterX = -1;
			zoomCenterY = -1;

			xPrev = x0;
			yPrev = y0;

			distX = 0;
			distY = 0;

			break;
		case MotionEvent.ACTION_MOVE:
			if (numTouches == 1) {
				float dx = (x0 - xTouchDown) * TRANSLATERATE;
				float dy = (y0 - yTouchDown) * TRANSLATERATE;
				xOffset += dx;
				yOffset += dy;
				mapLayout.setTranslationX(xOffset);
				mapLayout.setTranslationY(yOffset);

				distX += Math.abs(x0 - xPrev);
				distY += Math.abs(y0 - yPrev);
			}

			if (event.getPointerCount() > 1 && pinchDist > 0) {

				float adjustRate = 0.9f;
				zoomCenterX = zoomCenterX * adjustRate + ((x0 + x1) / 2)
						* (1 - adjustRate);
				zoomCenterY = zoomCenterY * adjustRate + (y0 + y1) / 2
						* (1 - adjustRate);

				float pinchRatio = ((dist - pinchDist) + EPS)
						/ (pinchDist + EPS);
				zoomFactor += pinchRatio * SCALERATE;
				zoomFactor = Math.max(1.0f, zoomFactor);

				mapLayout.setScaleX(zoomFactor);
				mapLayout.setScaleY(zoomFactor);

			}

			pinchDist = dist;
			break;
		case MotionEvent.ACTION_UP:
			if (numTouches == 1 && Math.max(distX, distY) < TAPTHRS) {
				selectTarget(x0, y0);
				MapManager.shift(mapLayout, xTouchDown, yTouchDown, SHIFTWIDTH,
						SHIFTHEIGHT);
			}
			canvas.setOffsets(0, 0);
			numTouches = 0;
			break;
		}

		xPrev = x0;
		yPrev = y0;
	}

	public void doTranslation(float dx, float dy) {
		xTouchDown -= dx;
		yTouchDown -= dy;
		xOffset += dx;
		yOffset += dy;
		mapLayout.setTranslationX(xOffset);
		mapLayout.setTranslationY(yOffset);
		MapManager.shift(mapLayout, xTouchDown, yTouchDown, SHIFTWIDTH,
				SHIFTHEIGHT);
	}

	public void swtichMapView() {
		idxMapViews = (idxMapViews + 1) % mapViews.length;
//		mapView.setImageResource(mapViews[idxMapViews]);
		
		mapLayout.removeView(canvas);
		mapLayout.removeView(mapView);
		
		switch(idxMapViews) {
		case 0:
			mapView = mapViewNormal;
			break;
		case 1:
			mapView = mapViewSatellite;
			break;
		}
		
		RelativeLayout.LayoutParams paramsMap = new RelativeLayout.LayoutParams(
				HEIGHT, HEIGHT);
		mapLayout.addView(mapView, paramsMap);
		RelativeLayout.LayoutParams paramsCanvas = new RelativeLayout.LayoutParams(
				HEIGHT, HEIGHT);
		mapLayout.addView(canvas, paramsCanvas);
	}

}

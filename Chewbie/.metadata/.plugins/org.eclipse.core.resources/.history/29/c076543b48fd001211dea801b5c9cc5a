package me.xiangchen.app.duetstudy;

import java.util.Calendar;

import me.xiangchen.app.duettech.DuetTechManager;
import me.xiangchen.app.duettech.R;
import me.xiangchen.network.xacUDPTask;
import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Log;
import android.view.MotionEvent;
import android.view.MotionEvent.PointerCoords;

public class MultiDeviceGesture extends TechniqueShell {

	public final static int PINCHOPEN = 0;
	public final static int PINCHCLOSE = 1;
	public final static int PHONETOWATCH = 2;
	public final static int WATCHTOPHONE = 3;

	public final static int SWIPEOPEN = 0;
	public final static int SWIPECLOSE = 1;

	public final static float TAPTHRS = 200;

	float distX;
	float distY;

	float xPrev;
	float yPrev;

	float xTouchDown;
	float yTouchDown;

	public MultiDeviceGesture(Context context) {
		super(context);
		technique = MULTIDEVICEGESTURE;

		numClasses = 4;
		classLabels = new int[] { PINCHOPEN, PINCHCLOSE, PHONETOWATCH,
				WATCHTOPHONE };
		numTrialsPerBlock = numClasses * numDataPointsPerClass / numBlocks;

		labelCounter = new int[numClasses];
		radii = new float[numClasses];
		for (int i = 0; i < numClasses; i++) {
			labelCounter[i] = 0;
			radii[i] = 1;
		}

		tvStatus.setText("Multi-device gesture");
		tvCue.setText("Tap to start ...");
	}

	@SuppressLint("NewApi")
	@Override
	public boolean doTouch(MotionEvent event) {
		if (!isBreak) {
			int action = event.getAction();
			if (isStarted) {
				PointerCoords curCoord = new PointerCoords();
				event.getPointerCoords(0, curCoord);

				long curTime = Calendar.getInstance().getTimeInMillis();

				switch (action) {
				case MotionEvent.ACTION_DOWN:
					distX = 0;
					distY = 0;
					xTouchDown = curCoord.x;
					yTouchDown = curCoord.y;
					break;
				case MotionEvent.ACTION_MOVE:
					distX += Math.abs(curCoord.x - xPrev);
					distY += Math.abs(curCoord.y - yPrev);
					break;
				case MotionEvent.ACTION_UP:
					if (Math.max(distX, distY) > TAPTHRS) {
						if (curCoord.x < xTouchDown && curCoord.y > yTouchDown) {
							// Log.d(LOGTAG, "swipe close");
							DuetTechManager.updatePhoneGesture(SWIPECLOSE,
									curTime);
						} else if (curCoord.x > xTouchDown
								&& curCoord.y < yTouchDown) {
							// Log.d(LOGTAG, "swipe open");
							DuetTechManager.updatePhoneGesture(SWIPEOPEN,
									curTime);
						}
					}
					break;
				}

				xPrev = curCoord.x;
				yPrev = curCoord.y;
			} else {
				if(action == MotionEvent.ACTION_UP) {
					isStarted = true;
					if(block == 0) {
						label = nextClassLabel(true);
					} else {
						label = nextClassLabel(false);
					}
					setCues();
					setStatus();
				}
			}
		}
		return true;
	}

	public void sendOffData(int recognizedAs) {
		String strFeatureRow = "";
		String[] classLabels = { "PinchOpen", "PinchClose", "PhoneToWatch",
				"WatchToPhone" };
		strFeatureRow += classLabels[label] + "," + classLabels[recognizedAs];
		new xacUDPTask().execute(strFeatureRow);
	}

	public void advance() {
		long curTime = Calendar.getInstance().getTimeInMillis();
		tvCue.setText("Please wait...");
		tvCue.invalidate();
		while(Calendar.getInstance().getTimeInMillis() - curTime < 5000) {
			Log.d(LOGTAG, "waiting");
		}
		
		++trial;
		if (trial == numTrialsPerBlock) {
			block++;
			isBreak = true;
			if (block == numBlocks) {
				tvCue.setTextColor(0xFFFFFFFF);
//				setPhoneImage(-1);
				tvCue.setText("End of technique");
				return;
			} else {
				tvCue.setTextColor(0xFFFFFFFF);
//				setPhoneImage(-1);
				tvCue.setText("End of block");
				isStarted = false;
				return;
			} 
		} else {
			tvCue.setTextColor(0xFFFFFFFF);
			tvCue.setText("Tap to start ...");
			
		}

		if(block == 0) {
			label = nextClassLabel(true);
		} else {
			label = nextClassLabel(false);
		}
		
		label = label == -1 ? SWIPEOPEN : label;
		setCues();
		setStatus();
	}

	@Override
	public void setCues() {
		super.setCues();
		switch (label) {
		case SWIPEOPEN:
			setPhoneImage(R.drawable.phone_open);
			tvCue.setText("Swipe open");
			DuetTechManager.setWatchImage(R.drawable.watch_open);
			break;
		case SWIPECLOSE:
			setPhoneImage(R.drawable.phone_close);
			tvCue.setText("Swipe close");
			DuetTechManager.setWatchImage(R.drawable.watch_close);
			break;
		case PHONETOWATCH:
			setPhoneImage(R.drawable.phone_close);
			tvCue.setText("Phone to watch");
			DuetTechManager.setWatchImage(R.drawable.watch_open);
			break;
		case WATCHTOPHONE:
			DuetTechManager.setWatchImage(R.drawable.watch_close);
			tvCue.setText("Watch to phone");
			setPhoneImage(R.drawable.phone_open);
			break;
		}
	}
	
//	@Override
//	public void runOnTimer() {
//		if(ivCue.getAlpha() < 255) {
//			ivCue.setAlpha(ivCue.getAlpha() + 1);
//		}
//	}
}

package me.xiangchen.app.duetapp.reader;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Hashtable;

import me.xiangchen.app.duetapp.App;
import me.xiangchen.app.duetapp.call.CallManager;
import me.xiangchen.app.duetos.LauncherManager;
import me.xiangchen.app.duetos.R;
import me.xiangchen.technique.doubleflip.xacAuthenticSenseFeatureMaker;
import me.xiangchen.technique.flipsense.xacFlipSenseFeatureMaker;
import me.xiangchen.technique.handsense.xacHandSenseFeatureMaker;
import me.xiangchen.technique.posturesense.xacPostureSenseFeatureMaker;
import me.xiangchen.technique.touchsense.xacTouchSenseFeatureMaker;
import me.xiangchen.ui.xacBufferCanvas;
import me.xiangchen.ui.xacInteractiveCanvas;
import me.xiangchen.ui.xacSketchCanvas;
import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.style.BackgroundColorSpan;
import android.view.MotionEvent;
import android.view.MotionEvent.PointerCoords;
import android.view.View;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;

public class Reader extends App {

	public final static String LOGTAG = "DuetOS";
	public final static int HAND = 0;
	public final static int PEN = 1;
	public final static int HIGHLIGHTER = 2;
	public final static int TEXTSELECTION = 3;

	public final static int APPWIDTH = 1080;

	public final static float CURSORWIDTH = 15;
	public final static float CURSORMARGIN = 20;

	public final static int SHIFTHORI = 0;
	public final static int SHIFTVERT = 0;

	public final static int MAXFONTSIZE = 30;
	public final static int MINFONTSIZE = 10;
	public final static int STEPSIZE = 2;

	public final static float MAXBRIGHTNESS = 1.0f;
	public final static float MINBRIGHTNESS = 0.1f;
	public final static float STEPBRIGHTNESS = 0.1f;

	public final static int NUMTOUCHESTIMEOUT = 100; // ms

	TextView textView;
	String text;
	ScrollView scrollView;
	xacSketchCanvas canvas;

	int handedness;
	int handPart;
	int isFlipped;

	boolean textScrollable = false;

	Hashtable<Integer, Integer> htHandPart;

	long timeTouchDown;

	float xPrev;
	float yPrev;

	xacBufferCanvas bufCan;

	RelativeLayout scrollLayout;

	int dScrollX = 0;
	int dScrollY = 0;

	xacInteractiveCanvas menu;
	float alphaMenu = 0.0f;

	String selectedText = "";
	int firstLine;
	int firstOffset;
	float firstX;
	int prevLine;
	int prevOffset;

	int textSize = 27;
	float brightness = 0.8f;
	Button btnIncrFontSize;
	Button btnDecrFontSize;
	Button btnIncrBrightness;
	Button btnDecrBrightness;
	Button btnPen;
	Button btnHighlighter;
	Button btnUndo;
	Button btnRedo;
	ArrayList<Button> buttons;
	TableLayout layoutButtons;

	int numTouches;
	
	boolean wasLongClick = false;
	
	int imgBtn[] = {R.drawable.pencil, R.drawable.highlighter, R.drawable.undo, R.drawable.redo,
			R.drawable.font_decr, R.drawable.font_incr, R.drawable.sun_small, R.drawable.sun_big};
	
	String tooltips[] = {"A pencil tool for annotation", "A highlighter tool for annotation", "Undo the last stroke", "Redo the last stroke",
			"Decrease the font size", "Increase the font size", "Decrease the screen brightness", "Increase the screen brightness"};
	Hashtable<Button, String> htTooltips;

	public Reader(Context context) {
		super(context);
		color = xacInteractiveCanvas.fgColorWood;
		// appView = new xacInteractiveCanvas(context);
		// appView.setBackgroundColor(color);

		ReaderManager.setPhone(this);

		appLayout = new RelativeLayout(context);
		appLayout.setBackgroundColor(0xFF000000);
		scrollLayout = new RelativeLayout(context);

		// scroll view
		scrollView = new ScrollView(context);
		scrollView.setOnTouchListener(new View.OnTouchListener() {
			@Override
			public boolean onTouch(View v, MotionEvent event) {

				doWatchConfig(event);

				if (xacAuthenticSenseFeatureMaker.getConfigStatus() != xacAuthenticSenseFeatureMaker.DOING
						|| event.getAction() == MotionEvent.ACTION_DOWN) {
					if (LauncherManager.getWatchConfig() == xacAuthenticSenseFeatureMaker.LEFTBACKWRIST) {
						doTouchWatchOnWristBack(event);
					} else if (LauncherManager.getWatchConfig() == xacAuthenticSenseFeatureMaker.LEFTINNERWRIST) {
						doTouchWatchOnInnerWrist(event);
					}
				}
				// }
				return true;
			}
		});

		// text view
		textView = new TextView(context);
		textView.setTextSize(textSize);
		textView.setBackgroundColor(xacInteractiveCanvas.bgColorWood);
		text = context.getString(R.string.a_tale_of_two_cities);
		textView.setText(text);
		textView.setTypeface(LauncherManager.getTypeface(LauncherManager.READ));
		textView.setBackgroundColor(Color.argb((int) (255 * brightness), 255,
				255, 255));
		scrollLayout.addView(textView);

		// sketch canvs
		canvas = new xacSketchCanvas(context);
		// canvas.setTool(xacSketchCanvas.ERASER);
		appLayout.addView(canvas);

		// buffer canvas
		bufCan = new xacBufferCanvas(context);
		Paint rectPaint = new Paint();
		rectPaint.setColor(0x880000FF);
		bufCan.setRectPaint(rectPaint);
		RelativeLayout.LayoutParams paramsBufCan = new RelativeLayout.LayoutParams(
				RelativeLayout.LayoutParams.MATCH_PARENT,
				RelativeLayout.LayoutParams.MATCH_PARENT);
		scrollLayout.addView(bufCan, paramsBufCan);
		canvas.setClientCanvas(bufCan);

		scrollView.addView(scrollLayout);
		appLayout.addView(scrollView);

		// menu
		// menu = new xacInteractiveCanvas(context);
		layoutButtons = new TableLayout(context);
		layoutButtons.setId(71);
		layoutButtons.setOnTouchListener(new View.OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				appLayout.removeView(layoutButtons);
				return false;
			}
		});
		dispatchButtons(context);
	}

	private void dispatchButtons(Context context) {
		// layoutButtons = new RelativeLayout(context);
		buttons = new ArrayList<Button>();
		htTooltips = new Hashtable<Button, String>();
		
		btnPen = new Button(context);
//		btnPen.setText("Pen");
		btnPen.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// float sizeText = textView.getTextSize();
				if(wasLongClick) {
					wasLongClick = false;
					return;
				}
				setTool(xacSketchCanvas.PEN);
			}
		});
		// layoutButtons.addView(btnPen);
		buttons.add(btnPen);

		btnHighlighter = new Button(context);
//		btnHighlighter.setText("Highlighter");
		btnHighlighter.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if(wasLongClick) {
					wasLongClick = false;
					return;
				}
				setTool(xacSketchCanvas.HIGHLIGHTER);

			}
		});
		// layoutButtons.addView(btnHighlighter);
		buttons.add(btnHighlighter);

		btnUndo = new Button(context);
//		btnUndo.setText("Undo");
		btnUndo.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if(wasLongClick) {
					wasLongClick = false;
					return;
				}
				undo();
			}
		});
		// layoutButtons.addView(btnUndo);
		buttons.add(btnUndo);

		btnRedo = new Button(context);
//		btnRedo.setText("Redo");
		btnRedo.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if(wasLongClick) {
					wasLongClick = false;
					return;
				}
				redo();
			}
		});
		// layoutButtons.addView(btnIncrBrightness);
		buttons.add(btnRedo);

		btnDecrFontSize = new Button(context);
//		btnDecrFontSize.setText("A-");
		btnDecrFontSize.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if(wasLongClick) {
					wasLongClick = false;
					return;
				}
				decrTextSize();

			}
		});
		// layoutButtons.addView(btnDecrFontSize);
		buttons.add(btnDecrFontSize);

		btnIncrFontSize = new Button(context);
//		btnIncrFontSize.setText("A+");
		btnIncrFontSize.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				if(wasLongClick) {
					wasLongClick = false;
					return;
				}
				incrTextSize();
			}
		});
		// layoutButtons.addView(btnIncrFontSize);
		buttons.add(btnIncrFontSize);
		
		btnDecrBrightness = new Button(context);
//		btnDecrBrightness.setText("B-");
		btnDecrBrightness.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if(wasLongClick) {
					wasLongClick = false;
					return;
				}
				decrBrightness();
			}
		});
		// layoutButtons.addView(btnIncrBrightness);
		buttons.add(btnDecrBrightness);
		
		btnIncrBrightness = new Button(context);
//		btnIncrBrightness.setText("B+");
		btnIncrBrightness.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if(wasLongClick) {
					wasLongClick = false;
					return;
				}
				incrBrightness();
			}
		});
		// layoutButtons.addView(btnIncrBrightness);
		buttons.add(btnIncrBrightness);

		int numRows = 2;
		int numCols = 4;
		int w = APPWIDTH / numCols;
		int h = w * 2 / 3;
		for (int i = 0; i < numRows; i++) {
			TableRow tr = new TableRow(context);
			for (int j = 0; j < numCols; j++) {
				TableRow.LayoutParams params = new TableRow.LayoutParams(j);
				int idxBtn = i * numCols + j;
				if (idxBtn < buttons.size()) {
					Button btn = buttons.get(idxBtn);
					btn.setLayoutParams(params);
					btn.setBackgroundResource(imgBtn[idxBtn]);
					htTooltips.put(btn, tooltips[idxBtn]);
					tr.addView(btn, w, h);
					
					btn.setOnLongClickListener(new View.OnLongClickListener() {
						
						@Override
						public boolean onLongClick(View view) {
							wasLongClick = true;
							ReaderManager.showTooltip(htTooltips.get((Button)view));
							return false;
						}
					});
				}
			}
			layoutButtons.addView(tr, new TableLayout.LayoutParams(
					TableLayout.LayoutParams.MATCH_PARENT,
					TableLayout.LayoutParams.WRAP_CONTENT));
		}

	}

	@Override
	public void runOnUIThread() {

	}

	@SuppressLint("NewApi")
	public void doWatchConfig(MotionEvent event) {
		int action = event.getAction();
		PointerCoords coords = new PointerCoords();
		event.getPointerCoords(0, coords);
		float xCur = coords.x;
		float yCur = coords.y;

		switch (action) {
		case MotionEvent.ACTION_DOWN:
			xacAuthenticSenseFeatureMaker.initTouch(xCur, yCur);
			break;
		case MotionEvent.ACTION_MOVE:
			if (xacAuthenticSenseFeatureMaker.getConfigStatus() == xacAuthenticSenseFeatureMaker.UNKNOWN) {
				xacAuthenticSenseFeatureMaker.isAHold(xCur, yCur);
			}
			break;
		case MotionEvent.ACTION_UP:
			if (xacAuthenticSenseFeatureMaker.getConfigStatus() == xacAuthenticSenseFeatureMaker.DOING) {
				int watchConfig = xacAuthenticSenseFeatureMaker
						.calculateAuthentication();
				LauncherManager.setWatchConfig(watchConfig);
				if (watchConfig != xacAuthenticSenseFeatureMaker.INTHEWILD) {
					int resId = -1;
					switch (watchConfig) {
					case xacAuthenticSenseFeatureMaker.LEFTBACKWRIST:
						resId = R.drawable.left_back_wrist;
						break;
					case xacAuthenticSenseFeatureMaker.LEFTINNERWRIST:
						resId = R.drawable.left_inner_wrist;
						ReaderManager.showToolPallete();
						break;
					case xacAuthenticSenseFeatureMaker.RIGHTBACKWRIST:
						resId = R.drawable.right_back_wrist;
						break;
					case xacAuthenticSenseFeatureMaker.RIGHTINNERWRIST:
						resId = R.drawable.right_inner_wrist;
						break;
					}
					LauncherManager.showNotificationOnUnockedPhone(resId);
				}
			}
			break;
		}
	}

	@SuppressLint("NewApi")
	public void doTouchWatchOnInnerWrist(MotionEvent event) {
		numTouches = Math.max(numTouches, event.getPointerCount());

		int action = event.getAction();

		Calendar calendar = Calendar.getInstance();
		long curTime = calendar.getTimeInMillis();

		PointerCoords coords = new PointerCoords();
		event.getPointerCoords(0, coords);
		float xCur = coords.x;
		float yCur = coords.y;

		switch (action) {
		case MotionEvent.ACTION_DOWN:
			timeTouchDown = curTime;
			break;
		case MotionEvent.ACTION_MOVE:
			if (curTime - timeTouchDown < NUMTOUCHESTIMEOUT) {
				break;
			}

			if (numTouches == 1) {
				canvas.doTouch(event);
			} else if (numTouches >= 2) {
				float speedRatio = 0.75f;
				int dx = 0;
				int dy = (int) ((yPrev - yCur) * speedRatio);
				dScrollX += dx;

				if (dScrollY + dy < 0) {
					dy *= 0.01f;
				}
				dScrollY += dy;

				scrollView.scrollBy(dx, dy);
				canvas.setScrollOffsets(dx, dy);

				dScrollY = Math.max(0, dScrollY);
			}

			break;
		case MotionEvent.ACTION_UP:
			if (numTouches == 1) {
				canvas.doTouch(event);
			}
			numTouches = event.getPointerCount();
			break;
		}

		xPrev = xCur;
		yPrev = yCur;
	}

	@SuppressLint("NewApi")
	public void doTouchWatchOnWristBack(MotionEvent event) {
		int action = event.getAction();

		Calendar calendar = Calendar.getInstance();
		long curTime = calendar.getTimeInMillis();

		PointerCoords coords = new PointerCoords();
		event.getPointerCoords(0, coords);
		float xCur = coords.x;
		float yCur = coords.y;

		canvas.setScrollOffsets(0, 0);
		switch (action) {
		case MotionEvent.ACTION_DOWN:

			timeTouchDown = curTime;
			bufCan.clearRects();
			handedness = xacHandSenseFeatureMaker.UNKNOWN;
			appLayout.removeView(layoutButtons);
			if (selectedText.length() > 0) {
				unSelectText(textView, text);
				selectedText = "";
			}

			// is there a flip?
			isFlipped = xacFlipSenseFeatureMaker.calculateFlipGesture();
			switch (isFlipped) {
			case xacFlipSenseFeatureMaker.FLIP:
				// show menu
				RelativeLayout.LayoutParams paramsButtons = new RelativeLayout.LayoutParams (
						RelativeLayout.LayoutParams.MATCH_PARENT,
						RelativeLayout.LayoutParams.WRAP_CONTENT);
				paramsButtons.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
				appLayout.addView(layoutButtons, paramsButtons);
				// alphaMenu = 0.0f;
				// menu.setAlpha(alphaMenu);
				break;
			case xacFlipSenseFeatureMaker.NOFLIP:
				// register hand part
				handPart = xacTouchSenseFeatureMaker
						.calculateHandPart(new double[] { event.getSize(0) });
				switch (handPart) {
				case xacTouchSenseFeatureMaker.PAD:
					break;
				case xacTouchSenseFeatureMaker.SIDE:
					break;
				case xacTouchSenseFeatureMaker.KNUCKLE:
					firstLine = -1;
					prevLine = -1;
					bufCan.clearRects();
					break;
				}
				break;
			}
			break;
		case MotionEvent.ACTION_MOVE:

			if (isFlipped == xacFlipSenseFeatureMaker.FLIP) {
				break;
			}

			if (curTime - timeTouchDown < xacHandSenseFeatureMaker.TOUCHONSETTIME) {
				break;
			}

			if (handedness == xacHandSenseFeatureMaker.UNKNOWN) {
				handedness = xacHandSenseFeatureMaker.calculateHandedness();
			}

			if (handedness == xacHandSenseFeatureMaker.NOWATCH) {
				float speedRatio = 0.75f;
				int dx = 0;
				int dy = (int) ((yPrev - yCur) * speedRatio);
				dScrollX += dx;

				if (dScrollY + dy < 0) {
					dy *= 0.01f;
				}
				dScrollY += dy;

				scrollView.scrollBy(dx, dy);
				canvas.setScrollOffsets(dx, dy);

				dScrollY = Math.max(0, dScrollY);
			} else {
				switch (handPart) {
				case xacTouchSenseFeatureMaker.PAD:
					canvas.doTouch(event);
					break;
				case xacTouchSenseFeatureMaker.SIDE:
					float speedRatio = 0.75f;
					int dx = 0;
					int dy = (int) ((yPrev - yCur) * speedRatio);
					dScrollX += dx;

					if (dScrollY + dy < 0) {
						dy *= 0.01f;
					}
					dScrollY += dy;

					scrollView.scrollBy(dx, dy);
					canvas.setScrollOffsets(dx, dy);

					dScrollY = Math.max(0, dScrollY);

					break;
				case xacTouchSenseFeatureMaker.KNUCKLE:
					Layout layout = textView.getLayout();
					if (layout != null) {
						prevLine = layout
								.getLineForVertical((int) (yCur + dScrollY))
								- SHIFTVERT;
						prevOffset = layout.getOffsetForHorizontal(prevLine,
								xCur) - SHIFTHORI;

						if (firstLine < 0) {
							firstLine = prevLine;
							firstOffset = prevOffset;
							firstX = xCur;
						}

						float lineHeight = textView.getLineHeight();
						float x0 = firstX;
						float y0 = firstLine * lineHeight;
						float x1 = xCur;
						float y1 = prevLine * lineHeight;
						updateSelectionFrame(x0, y0, x1, y1, lineHeight);
					}
				}
				break;
			}
			break;
		case MotionEvent.ACTION_UP:

			if (isFlipped == xacFlipSenseFeatureMaker.FLIP) {
				break;
			}

			if (handedness == xacHandSenseFeatureMaker.WATCH) {
				switch (handPart) {
				case xacTouchSenseFeatureMaker.PAD:
					canvas.doTouch(event);
					break;
				case xacTouchSenseFeatureMaker.SIDE:
					unSelectText(textView, text);
					break;
				case xacTouchSenseFeatureMaker.KNUCKLE:
					int start = Math.min(firstOffset, prevOffset);
					int end = Math.max(firstOffset, prevOffset);
					while(start > 0 && !text.substring(start - 1, start).equals(" ")) {
						start--;
					}
					
					while(end < text.length() && !text.substring(end, end + 1).equals(" ")) {
						end++;
					}
					
					if(text.substring(end - 1, end).equals(",") ||
							text.substring(end - 1, end).equals(".") ) {
						end--;
					}
					
//					selectedText = smartTextSelection(start, end, text);
					selectedText = text.substring(start, end);
					selectText(textView, start, end);
					ReaderManager.showTextOption(selectedText);
					bufCan.clearRects();
					break;
				}
			}

			break;
		}

		xPrev = xCur;
		yPrev = yCur;
	}

	private void updateCursor(float l, float t, float r, float b) {
		bufCan.clearRects();
		RectF rectf = new RectF(l, t, r, b);
		bufCan.addRect(rectf);
		bufCan.invalidate();
	}

	private void updateSelectionFrame(float x0, float y0, float x1, float y1,
			float lineHeight) {
		bufCan.clearRects();
		if (y0 == y1) {
			// draw a frame with the current line
			float xmin = Math.min(x0, x1);
			float xmax = Math.max(x0, x1);
			bufCan.addRect(new RectF(xmin, y0, xmax, y0 + lineHeight));
		} else {
			float ymin = Math.min(y0, y1);
			float ymax = Math.max(y0, y1);
			float xmin = ymin == y0 ? x0 : x1;
			float xmax = ymax == y0 ? x0 : x1;

			// draw a frame on the first line
			bufCan.addRect(new RectF(xmin, ymin, APPWIDTH, ymin + lineHeight));
			// draw some frames in between
			for (float y = ymin + lineHeight; y < ymax; y += lineHeight) {
				bufCan.addRect(new RectF(0, y, APPWIDTH, y + lineHeight));
			}
			// draw a frame on the last line
			bufCan.addRect(new RectF(0, ymax, xmax, ymax + lineHeight));
		}
		bufCan.invalidate();
	}

	@Override
	public void doAccelerometer(float values[]) {
		xacHandSenseFeatureMaker.updatePhoneAccel(values);
		xacHandSenseFeatureMaker.addPhoneFeatureEntry();

		xacTouchSenseFeatureMaker.updatePhoneAccel(values);
		xacTouchSenseFeatureMaker.addPhoneFeatureEntry();

		xacFlipSenseFeatureMaker.updatePhoneAccel(values);
		xacFlipSenseFeatureMaker.addPhoneFeatureEntry();
	}

	private void selectText(TextView tv, int start, int end) {
		Spannable textSpannable = new SpannableStringBuilder(tv.getText());
		textSpannable.setSpan(new BackgroundColorSpan(Color.TRANSPARENT), 0,
				start - 1, 0);
		textSpannable.setSpan(new BackgroundColorSpan(0x881ABCBD), start, end,
				0);
		textSpannable.setSpan(new BackgroundColorSpan(Color.TRANSPARENT),
				end + 1, text.length() - 1, 0);
		tv.setText(textSpannable);
	}

	private void unSelectText(TextView tv, String txt) {
		tv.setText(txt);
	}

	public void setTool(int tool) {
		canvas.setTool(tool);
	}

	public void undo() {
		bufCan.undo();
	}

	public void redo() {
		bufCan.redo();
	}

	public void incrTextSize() {
		textSize += STEPSIZE;
		textSize = Math.min(textSize, MAXFONTSIZE);
		textView.setTextSize(textSize);
	}

	public void decrTextSize() {
		textSize -= STEPSIZE;
		textSize = Math.max(textSize, MINFONTSIZE);
		textView.setTextSize(textSize);
	}

	public void incrBrightness() {
		brightness += STEPBRIGHTNESS;
		brightness = Math.min(brightness, MAXBRIGHTNESS);
		textView.setBackgroundColor(Color.argb((int) (255 * brightness), 255,
				255, 255));
	}

	public void decrBrightness() {
		brightness -= STEPBRIGHTNESS;
		brightness = Math.max(brightness, MINBRIGHTNESS);
		textView.setBackgroundColor(Color.argb((int) (255 * brightness), 255,
				255, 255));
	}
	
//	public String smartTextSelection(int start, int end, String text) {
//		while(start > 0 && !text.substring(start - 1, start).equals(" ")) {
//			start--;
//		}
//		
//		while(end < text.length() && !text.substring(end, end + 1).equals(" ")) {
//			end++;
//		}
//		
//		return text.substring(start, end);
//	}
}

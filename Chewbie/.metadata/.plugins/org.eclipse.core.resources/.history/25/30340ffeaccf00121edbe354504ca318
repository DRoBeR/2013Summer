package me.xiangchen.app.realsmartwatch;

//import me.xiangchen.app.realsmartwatch.R;
import android.content.ContentValues;
import android.content.Context;

import com.sonyericsson.extras.liveware.aef.registration.Registration;
import com.sonyericsson.extras.liveware.extension.util.ExtensionUtils;
import com.sonyericsson.extras.liveware.extension.util.registration.RegistrationInformation;

public class SampleRegistrationInformation extends RegistrationInformation {

    final Context mContext;

    /**
     * Create notification registration object
     *
     * @param context The context
     */
    protected SampleRegistrationInformation(Context context) {
        if (context == null) {
            throw new IllegalArgumentException("context == null");
        }
        mContext = context;
    }

    @Override
    public int getRequiredControlApiVersion() {
        return 1;
    }

    @Override
    public int getRequiredSensorApiVersion() {
        return 0;
    }

    @Override
    public int getRequiredNotificationApiVersion() {
        return 0;
    }

    @Override
    public int getRequiredWidgetApiVersion() {
        return 0;
    }

    @Override
    public ContentValues getExtensionRegistrationConfiguration() {
        String extensionIcon = ExtensionUtils.getUriString(mContext,
                R.drawable.ic_extension);
        String iconHostapp = ExtensionUtils.getUriString(mContext,
                R.drawable.ic_extension);

        String configurationText = mContext.getString(R.string.configuration_text);
        String extensionName = mContext.getString(R.string.extension_name);

        ContentValues values = new ContentValues();
//        values.put(Registration.ExtensionColumns.CONFIGURATION_ACTIVITY,
//        		SampleWatchActivity.class.getName());
        values.put(Registration.ExtensionColumns.CONFIGURATION_TEXT, configurationText);
        values.put(Registration.ExtensionColumns.EXTENSION_ICON_URI, extensionIcon);
        values.put(Registration.ExtensionColumns.EXTENSION_KEY,
                SampleExtensionService.EXTENSION_KEY);
        values.put(Registration.ExtensionColumns.HOST_APP_ICON_URI, iconHostapp);
        values.put(Registration.ExtensionColumns.NAME, extensionName);
        values.put(Registration.ExtensionColumns.NOTIFICATION_API_VERSION,
                getRequiredNotificationApiVersion());
        values.put(Registration.ExtensionColumns.PACKAGE_NAME, mContext.getPackageName());

        return values;
    
    }
    
//    @Override
//	public ContentValues[] getSourceRegistrationConfigurations() {
//		List<ContentValues> bulkValues = new ArrayList<ContentValues>();
//		bulkValues
//				.add(getSourceRegistrationConfiguration(SampleExtensionService.EXTENSION_SPECIFIC_ID));
//		return bulkValues.toArray(new ContentValues[bulkValues.size()]);
//	}
//    
//	public ContentValues getSourceRegistrationConfiguration(
//			String extensionSpecificId) {
//		ContentValues sourceValues = null;
//		String iconSource1 = ExtensionUtils.getUriString(mContext,
//				R.drawable.ic_extension);
//		String iconSource2 = ExtensionUtils.getUriString(mContext,
//				R.drawable.ic_extension);
//		String actionEvent1 = mContext.getString(R.string.action_event_1);
//		sourceValues = new ContentValues();
//		sourceValues.put(Notification.SourceColumns.ACTION_1, actionEvent1);
//		sourceValues.put(Notification.SourceColumns.ENABLED, true);
//		sourceValues.put(Notification.SourceColumns.ICON_URI_1, iconSource1);
//		sourceValues.put(Notification.SourceColumns.ICON_URI_2, iconSource2);
//		sourceValues.put(Notification.SourceColumns.UPDATE_TIME,
//				System.currentTimeMillis());
//		// Source specific values
//		sourceValues.put(Notification.SourceColumns.NAME,
//				mContext.getString(R.string.source_name));
//		sourceValues.put(Notification.SourceColumns.EXTENSION_SPECIFIC_ID,
//				extensionSpecificId);
//		return sourceValues;
//	}

}

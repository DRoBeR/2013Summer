package me.xiangchen.app.duettech;

import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import me.xiangchen.app.duetstudy.Bump;
import me.xiangchen.app.duetstudy.FlipAndTap;
import me.xiangchen.app.duetstudy.FlipToConfigure;
import me.xiangchen.app.duetstudy.Handedness;
import me.xiangchen.app.duetstudy.MultiDeviceGesture;
import me.xiangchen.app.duetstudy.TechniqueShell;
import me.xiangchen.app.duetstudy.TouchWithHandParts;
import me.xiangchen.app.duetstudy.WristTilt;
import me.xiangchen.technique.bumpsense.xacBumpSenseFeatureMaker;
import me.xiangchen.technique.doubleflip.xacAuthenticSenseFeatureMaker;
import me.xiangchen.technique.flipsense.xacFlipSenseFeatureMaker;
import me.xiangchen.technique.handsense.xacHandSenseFeatureMaker;
import me.xiangchen.technique.tiltsense.xacTiltSenseFeatureMaker;
import me.xiangchen.technique.touchsense.xacTouchSenseFeatureMaker;
import android.app.Activity;
import android.content.Context;
import android.graphics.Typeface;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class DuetTech extends Activity implements SensorEventListener {

	public final static int PHONEACCELFPSGAME = 50;
	public final static int FONTSIZE = 32;
	public final static int SCREENWIDTH = 1080;
	public final static int SCREENHEIGHT = 1920;
	public final static int TEXTWIDTH = 480;
	public final static int TEXTHEIGHT = 240;
	public final static int TIMERFPS = 10;

	RelativeLayout mediator;
	TextView tvMediating;

	FlipAndTap flipAndTap;
	WristTilt wristTilt;
	TouchWithHandParts touchWithHandParts;
	Handedness handedness;
	Bump bump;
	FlipToConfigure flipToConfigure;
	MultiDeviceGesture multiDeviceGesture;

	TechniqueShell[] techniques;
	int idxTech = -1;

	RelativeLayout layout;

	SensorManager sensorManager;
	Sensor sensorAccel;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		DuetTechManager.setPhone(this);
		DuetTechManager.initGestureManager()
;		
		// remove title bar
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		// remove notification bar
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);

		layout = new RelativeLayout(this);
		layout.setOnTouchListener(new View.OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				if (idxTech >= 0) {
					return techniques[idxTech].doTouch(event);
				}
				return false;
			}
		});
		layout.setBackgroundResource(R.drawable.phone_close);
		
		mediator = new RelativeLayout(this);
		mediator.setBackgroundColor(0xFF000000);

		tvMediating = new TextView(this);
		tvMediating.setTextSize(FONTSIZE);
		tvMediating.setTextColor(0xFFFFFFFF);
		tvMediating.setTypeface(Typeface.createFromAsset(this.getAssets(),
				"fonts/HelveticaBQ-Light.otf"));
		tvMediating.setWidth(TEXTWIDTH);
		tvMediating.setHeight(TEXTHEIGHT);
		tvMediating.setGravity(Gravity.CENTER_VERTICAL
				| Gravity.CENTER_HORIZONTAL);
		RelativeLayout.LayoutParams paramsText = new RelativeLayout.LayoutParams(
				TEXTWIDTH, TEXTHEIGHT);
		paramsText.addRule(RelativeLayout.CENTER_IN_PARENT);
		tvMediating.setText("Duet");
		mediator.addView(tvMediating, paramsText);

		RelativeLayout.LayoutParams paramsMediator = new RelativeLayout.LayoutParams(
				RelativeLayout.LayoutParams.MATCH_PARENT,
				RelativeLayout.LayoutParams.MATCH_PARENT);
		layout.addView(mediator, paramsMediator);

		flipAndTap = new FlipAndTap(this);
		wristTilt = new WristTilt(this);
		touchWithHandParts = new TouchWithHandParts(this);
		handedness = new Handedness(this);
		bump = new Bump(this);
		flipToConfigure = new FlipToConfigure(this);
		multiDeviceGesture = new MultiDeviceGesture(this);

		techniques = new TechniqueShell[] { flipAndTap, wristTilt,
				touchWithHandParts, handedness, bump, flipToConfigure, multiDeviceGesture };

		// sensors
		sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		sensorAccel = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		sensorManager.registerListener(this, sensorAccel,
				SensorManager.SENSOR_DELAY_GAME);

		Timer timer = new Timer();
		timer.scheduleAtFixedRate(new TimerTask() {
			@Override
			public void run() {
				if (idxTech >= 0) {
					runOnUiThread(new Runnable() {
						@Override
						public void run() {
							techniques[idxTech].runOnTimer();
						}
					});
				}
			}
		}, new Date(), 1000 / TIMERFPS);

		// all the recognizers
		xacHandSenseFeatureMaker.setLabels(xacHandSenseFeatureMaker.UNKNOWN,
				xacHandSenseFeatureMaker.UNKNOWN);
		xacHandSenseFeatureMaker.createFeatureTable();

		xacFlipSenseFeatureMaker.setLabels(xacFlipSenseFeatureMaker.UNKNOWN,
				xacFlipSenseFeatureMaker.UNKNOWN);
		xacFlipSenseFeatureMaker.createFeatureTable();

		xacTouchSenseFeatureMaker.setLabels(xacTouchSenseFeatureMaker.UNKNOWN,
				xacTouchSenseFeatureMaker.UNKNOWN);
		xacTouchSenseFeatureMaker.createFeatureTable();

		xacAuthenticSenseFeatureMaker.createFeatureTable();
		xacAuthenticSenseFeatureMaker.setLabels(
				xacAuthenticSenseFeatureMaker.INTHEWILD,
				xacAuthenticSenseFeatureMaker.INTHEWILD);

		xacTiltSenseFeatureMaker.createFeatureTable();
		xacTiltSenseFeatureMaker.setLabels(xacTiltSenseFeatureMaker.NONE,
				xacTiltSenseFeatureMaker.NONE);

		xacBumpSenseFeatureMaker.createFeatureTable();
		xacBumpSenseFeatureMaker.setLabels(xacBumpSenseFeatureMaker.NOBUMP,
				xacBumpSenseFeatureMaker.NOBUMP);

		setContentView(layout);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.duet_tech, menu);
		return true;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		switch (keyCode) {
		case KeyEvent.KEYCODE_VOLUME_UP:
			if (idxTech >= 0) {
				techniques[idxTech].nextBlock();
			}
			break;
		case KeyEvent.KEYCODE_VOLUME_DOWN:
			// next technique
			int numTechniques = techniques.length;
			if (idxTech >= 0) {
				layout.removeView(techniques[idxTech]);
			} else {
				layout.removeView(mediator);
			}

			idxTech = (idxTech + 1) % numTechniques;
			layout.addView(techniques[idxTech]);

			break;
		}

		return true;
	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		xacHandSenseFeatureMaker.updatePhoneAccel(event.values);
		xacHandSenseFeatureMaker.addPhoneFeatureEntry();

		xacFlipSenseFeatureMaker.updatePhoneAccel(event.values);
		xacFlipSenseFeatureMaker.addPhoneFeatureEntry();

		xacTouchSenseFeatureMaker.updatePhoneAccel(event.values);
		xacTouchSenseFeatureMaker.addPhoneFeatureEntry();

		xacAuthenticSenseFeatureMaker.updatePhoneAccel(event.values);
		xacAuthenticSenseFeatureMaker.addPhoneFeatureEntry();

		xacTiltSenseFeatureMaker.updatePhoneAccel(event.values);
		xacTiltSenseFeatureMaker.addPhoneFeatureEntry();

		xacBumpSenseFeatureMaker.updatePhoneAccel(event.values);
		xacBumpSenseFeatureMaker.addPhoneFeatureEntry();
	}

	@Override
	public void onAccuracyChanged(Sensor arg0, int arg1) {
		// TODO Auto-generated method stub

	}
}

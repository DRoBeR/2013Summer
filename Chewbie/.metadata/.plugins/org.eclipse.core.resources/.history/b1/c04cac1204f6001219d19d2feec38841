package me.xiangchen.app.duetapp.call;

import java.util.Hashtable;

import me.xiangchen.app.duetapp.AppExtension;
import me.xiangchen.technique.posturesense.xacPostureSenseFeatureMaker;
import me.xiangchen.technique.sharesense.xacShareSenseFeatureMaker;

import com.sonyericsson.extras.liveware.aef.control.Control;

public class CallExtension extends AppExtension {

	int posture;
	final String[] appExtensions = {"Contact", "Email", "Calendar"};
	int idxAppExts = 0;
	Hashtable<String, Integer> htIdxItems;
	
	int idxInApp = 0;
	String[][][] appScreens;
	
	public CallExtension() {
		
		CallManager.setWatch(this);
		htIdxItems = new Hashtable<String, Integer>();
		for(String appExt : appExtensions) {
			htIdxItems.put(appExt, 0);
		}
		
		int numApps = appExtensions.length;
		int numItems = 3;
		int numPages = 3;
		appScreens = new String[numApps][][];
		for(int i=0; i<numApps; i++) {
			appScreens[i] = new String[numItems][];
			for(int j=0; j<numItems; j++) {
				for(int k=0; k<numPages; k++) {
					appScreens[i][j][k] = appExtensions[i] + " #" + (j+1) + "\n" + "Page " + (k+1);
				}
			}
		}
	}
	
	@Override
	public void doResume() {
		showText("Call");
	}
	
	@Override
	public void doAccelerometer(float[] values) {
		xacPostureSenseFeatureMaker.updateWatchAccel(values);
		xacPostureSenseFeatureMaker.addWatchFeatureEntry();
	}
	
	@Override
	public void doSwipe(int direction) {
		posture = xacPostureSenseFeatureMaker.calculatePosture();
		if(posture != xacPostureSenseFeatureMaker.WATCH) {
			return;
		}
		
		switch (direction) {
		case Control.Intents.SWIPE_DIRECTION_UP:
			buzz(100);
			CallManager.playLastVoiceMail();
			break;
		case Control.Intents.SWIPE_DIRECTION_DOWN:
			buzz(100);
			CallManager.playNextVoiceMail();
			break;
		}
	}
	
	public void showAppExtension() {
		String strAppItem = appExtensions[idxAppExts] + " #" + (htIdxItems.get(appExtensions[idxAppExts]) + 1);
		showText(strAppItem);
	}
	
	public void nextAppExtension() {
		idxAppExts = (idxAppExts + 1) % appExtensions.length;
		showAppExtension();
	}
	
	public void lastAppExtension() {
		idxAppExts = (idxAppExts + appExtensions.length - 1) % appExtensions.length;
		showAppExtension();
	}
	
	public void nextItem() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		idxItem++;
		htIdxItems.put(appExtensions[idxAppExts], idxItem);
		showAppExtension();
	}
	
	public void lastItem() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		idxItem--;
		idxItem = Math.max(0, idxItem);
		htIdxItems.put(appExtensions[idxAppExts], idxItem);
		showAppExtension();
	}
	
	
	public void scrollDownApp() {
		idxInApp = Math.min(idxInApp+1, appScreens[idxAppExts].length - 1);
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		showText(appScreens[idxAppExts][idxItem][idxInApp]);
	}
	
	public void scrollUpApp() {
		idxInApp = Math.max(idxInApp-1, 0);
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		showText(appScreens[idxAppExts][idxItem][idxInApp]);
	}
	
	public void getOutOfApp() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		htIdxItems.put(appExtensions[idxAppExts], idxItem);
		showAppExtension();
	}
	
	public void getInApp() {
		Integer idxItem = htIdxItems.get(appExtensions[idxAppExts]);
		idxInApp = 0;
		showText(appScreens[idxAppExts][idxItem][idxInApp]);
	}
}

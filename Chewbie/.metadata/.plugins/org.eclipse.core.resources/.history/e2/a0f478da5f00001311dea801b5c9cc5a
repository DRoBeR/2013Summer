package me.xiangchen.app.duetos;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Timer;
import java.util.TimerTask;

import me.xiangchen.app.duetapp.App;
import me.xiangchen.app.duetapp.AppExtension;
import me.xiangchen.app.duetapp.call.Call;
import me.xiangchen.app.duetapp.call.CallExtension;
import me.xiangchen.app.duetapp.email.Email;
import me.xiangchen.app.duetapp.email.EmailExtension;
import me.xiangchen.app.duetapp.email.EmailManager;
import me.xiangchen.app.duetapp.map.Map;
import me.xiangchen.app.duetapp.map.MapExtension;
import me.xiangchen.app.duetapp.reader.Reader;
import me.xiangchen.app.duetapp.reader.ReaderExtenstion;
import me.xiangchen.lib.xacPhoneGesture;
import me.xiangchen.technique.bumpsense.xacBumpSenseFeatureMaker;
import me.xiangchen.technique.doubleflip.xacAuthenticSenseFeatureMaker;
import me.xiangchen.technique.flipsense.xacFlipSenseFeatureMaker;
import me.xiangchen.technique.handsense.xacHandSenseFeatureMaker;
import me.xiangchen.technique.posturesense.xacPostureSenseFeatureMaker;
import me.xiangchen.technique.sharesense.xacShareSenseFeatureMaker;
import me.xiangchen.technique.tiltsense.xacTiltSenseFeatureMaker;
import me.xiangchen.technique.touchsense.xacTouchSenseFeatureMaker;
import me.xiangchen.technique.updownsense.xacUpDownSenseFeatureMaker;
import me.xiangchen.ui.xacInteractiveCanvas;
import me.xiangchen.ui.xacShape;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.graphics.BitmapFactory;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.MotionEvent.PointerCoords;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;

public class Launcher extends Activity implements SensorEventListener {

	public final static String LOGTAG = "DuetOS";
	public final static int AUTOLOCKTIMEOUT = 1800; // sec
	public final static int TIMERFPS = 30;
	public final static float TAPTHRS = 200;
	public final static int LONGPRESSTIMEOUT = 750; // ms
	public final static int TIMEOUTRECONFIG = 1000 / TIMERFPS; // ms

	RelativeLayout layout;
	xacInteractiveCanvas canvas;
	xacInteractiveCanvas curtain;

	ArrayList<App> apps;
	Hashtable<xacShape, App> htApps;
	Hashtable<App, AppExtension> htAppExtensions;

	ArrayList<xacShape> hitIcons;
	App activeApp = null;

	SensorManager sensorManager;
	Sensor sensorAccel;

	Timer timer;
	boolean isLocked = false;
	boolean isBeingUsed = true;
	long lastUsageTime = 0;

	float distX;
	float distY;

	float xPrev;
	float yPrev;

	float xTouchDown;
	float yTouchDown;

	Call call;
	Email email;
	Reader reader;
	Map map;

	long timeTouchDown;

	String sup;

	boolean isPreviewing = false;

	int handpart = xacTouchSenseFeatureMaker.UNKNOWN;

	float prevX;
	float prevY;

	int timerReconfig = 0;

	int handedness = xacHandSenseFeatureMaker.UNKNOWN;

	xacPhoneGesture pressAndHold;

	int isHold = xacPhoneGesture.NO;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		LauncherManager.setPhone(this);

		// remove title bar
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		// remove notification bar
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);

		// launcher layout
		layout = new RelativeLayout(this);
		canvas = new xacInteractiveCanvas(this);
		canvas.setBackgroundResource(R.drawable.bg_duetos);
		// canvas.setBackgroundColor(xacInteractiveCanvas.bgColorLight);
		canvas.setOnTouchListener(new View.OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				doCanvasTouch(event);
				return true;
			}
		});

		// curtain
		curtain = new xacInteractiveCanvas(this);
		curtain.setBackgroundColor(0xDD000000);
		curtain.setOnTouchListener(new View.OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				doCurtainTouch(event);
				return true;
			}
		});
		LauncherManager.initGestureManager();

		layout.addView(canvas);
		setContentView(layout);

		// sensors
		sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		sensorAccel = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		sensorManager.registerListener(this, sensorAccel,
				SensorManager.SENSOR_DELAY_GAME);

		initApps();

		Calendar calendar = Calendar.getInstance();
		lastUsageTime = calendar.getTimeInMillis();

		timer = new Timer();
		timer.scheduleAtFixedRate(new TimerTask() {
			@Override
			public void run() {

				Calendar calendar = Calendar.getInstance();
				long curTime = calendar.getTimeInMillis();

				if (!isLocked
						&& (curTime - lastUsageTime) / 1000 > AUTOLOCKTIMEOUT) {
					runOnUiThread(new Runnable() {
						@Override
						public void run() {
							lockScreen();
						}
					});
					isLocked = true;
				}

				runOnUiThread(new Runnable() {
					@Override
					public void run() {
						LauncherManager.updateToast();
					}
				});

				runOnUiThread(new Runnable() {
					@Override
					public void run() {

						if (activeApp != null) {
							activeApp.runOnUIThread();
						} else {
							if (!isPreviewing) {
								LauncherManager.showTime();
							}
						}
					}

				});

			}
		}, new Date(), 1000 / TIMERFPS);

		pressAndHold = new xacPhoneGesture(xacPhoneGesture.PRESSANDHOLD);

		// all the recognizers
		xacHandSenseFeatureMaker.setLabel(xacHandSenseFeatureMaker.UNKNOWN);
		xacHandSenseFeatureMaker.createFeatureTable();

		xacFlipSenseFeatureMaker.setLabel(xacFlipSenseFeatureMaker.UNKNOWN);
		xacFlipSenseFeatureMaker.createFeatureTable();

		xacTouchSenseFeatureMaker.setLabel(xacTouchSenseFeatureMaker.UNKNOWN);
		xacTouchSenseFeatureMaker.createFeatureTable();

		xacAuthenticSenseFeatureMaker.createFeatureTable();
		xacAuthenticSenseFeatureMaker
				.setLabel(xacAuthenticSenseFeatureMaker.INTHEWILD);

		xacPostureSenseFeatureMaker.setLabel(xacPostureSenseFeatureMaker.NONE);
		xacPostureSenseFeatureMaker.createFeatureTable();

		xacUpDownSenseFeatureMaker.setLabel(xacUpDownSenseFeatureMaker.UP);
		xacUpDownSenseFeatureMaker.createFeatureTable();

		xacShareSenseFeatureMaker.createFeatureTable();
		xacShareSenseFeatureMaker.setLabel(xacShareSenseFeatureMaker.PUBLIC);

		xacTiltSenseFeatureMaker.createFeatureTable();
		xacTiltSenseFeatureMaker.setLabel(xacTiltSenseFeatureMaker.NONE);

		xacBumpSenseFeatureMaker.createFeatureTable();
		xacBumpSenseFeatureMaker.setLabel(xacBumpSenseFeatureMaker.NOBUMP);

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.launcher, menu);
		return true;
	}

	private void initApps() {
		apps = new ArrayList<App>();
		htApps = new Hashtable<xacShape, App>();
		htAppExtensions = new Hashtable<App, AppExtension>();

		call = new Call(this);
		addIcon(call, R.drawable.call_icon);
		apps.add(call);
		CallExtension callExtension = new CallExtension();
		htAppExtensions.put(call, callExtension);

		email = new Email(this);
		addIcon(email, R.drawable.email_icon);
		apps.add(email);
		EmailExtension emailExtension = new EmailExtension(this);
		htAppExtensions.put(email, emailExtension);

		reader = new Reader(this);
		addIcon(reader, R.drawable.reader_icon);
		apps.add(reader);
		ReaderExtenstion readerExtension = new ReaderExtenstion();
		htAppExtensions.put(reader, readerExtension);

		map = new Map(this);
		addIcon(map, R.drawable.map_icon);
		apps.add(map);
		MapExtension mapExtension = new MapExtension();
		htAppExtensions.put(map, mapExtension);
	}

	private void addIcon(App app, int resId) {
		// the visual
		int numRows = apps.size() / LauncherManager.NUMAPPSROW;
		float cy = LauncherManager.MARGINHEIGHT * (numRows + 1)
				+ LauncherManager.APPHEIGHT * (numRows + 0.5f);

		int numCols = apps.size() - LauncherManager.NUMAPPSROW * numRows;
		float cx = LauncherManager.MARGINWIDTH * (numCols + 1)
				+ LauncherManager.APPWIDTH * (numCols + 0.5f);

		xacShape icon = canvas.addShape(xacShape.ICON,
				LauncherManager.APPWIDTH, LauncherManager.APPHEIGHT, cx, cy,
				app.getColor());
		icon.setBitmap(BitmapFactory.decodeResource(this.getResources(), resId));
		htApps.put(icon, app);
	}

	private void lockScreen() {
		layout.addView(curtain);
		isLocked = true;
	}

	private void unLockScreen() {
		layout.removeView(curtain);
		isLocked = false;
		Calendar calendar = Calendar.getInstance();
		lastUsageTime = calendar.getTimeInMillis();
	}

	public ViewGroup getLayout() {
		return layout;
	}

	@SuppressLint("NewApi")
	private void doCanvasTouch(MotionEvent event) {
		Calendar calendar = Calendar.getInstance();
		long curTime = calendar.getTimeInMillis();
		lastUsageTime = curTime;

		int action = event.getAction();
		PointerCoords curCoord = new PointerCoords();
		event.getPointerCoords(0, curCoord);

		switch (action) {
		case MotionEvent.ACTION_DOWN:
			distX = 0;
			distY = 0;
			isHold = xacPhoneGesture.NO;
			pressAndHold.update(event);
			handedness = xacHandSenseFeatureMaker.UNKNOWN;
			timeTouchDown = curTime;
			handpart = xacTouchSenseFeatureMaker
					.calculateHandPart(new double[] { event.getSize(0) });
			if (handpart == xacTouchSenseFeatureMaker.KNUCKLE) {
				hitIcons = canvas.getTouchedShapes(curCoord.x, curCoord.y);
			}
			break;
		case MotionEvent.ACTION_MOVE:
			distX += Math.abs(curCoord.x - xPrev);
			distY += Math.abs(curCoord.y - yPrev);
			
			Log.d(LOGTAG, distX + "~~~" + distY);
			
			if (isHold != xacPhoneGesture.YES) {
				isHold = pressAndHold.update(event);
			}
			if (curTime - timeTouchDown < xacHandSenseFeatureMaker.TOUCHONSETTIME) {
				break;
			}

			if (handedness == xacHandSenseFeatureMaker.UNKNOWN) {
				handedness = xacHandSenseFeatureMaker.calculateHandedness();
			}

			if (handedness == xacHandSenseFeatureMaker.WATCH
					&& handpart == xacTouchSenseFeatureMaker.KNUCKLE) {
				for (xacShape icon : hitIcons) {
					icon.offset(curCoord.x - prevX, curCoord.y - prevY);
				}
				canvas.invalidate();
			} else {
				if (curTime - timeTouchDown > LONGPRESSTIMEOUT) {
					isPreviewing = true;
					hitIcons = canvas.getTouchedShapes(curCoord.x, curCoord.y);
					if (hitIcons.size() > 0) {
						xacShape hitIcon = hitIcons.get(0);
						App hoverApp = htApps.get(hitIcon);
						if (hoverApp != null) {
							String supNew = hoverApp.getSup();
							if (sup != supNew) {
								sup = supNew;
								LauncherManager.watchUp(sup);
							}

						}
					}
				}
			}
			break;
		case MotionEvent.ACTION_UP:

			if (isHold == xacPhoneGesture.YES && Math.max(distX, distY) < TAPTHRS) {
				int watchConfig = xacAuthenticSenseFeatureMaker
						.calculateAuthentication();
				LauncherManager.updateWatchConfig(watchConfig);
				break;
			}

			if (handedness == xacHandSenseFeatureMaker.WATCH
					&& handpart == xacTouchSenseFeatureMaker.KNUCKLE) {
				for (xacShape icon : hitIcons) {
					int numCols = Math.max(0,
							(int) (icon.getX() / icon.getW()) - 1);
					float cx = LauncherManager.MARGINWIDTH * (numCols + 1)
							+ LauncherManager.APPWIDTH * (numCols + 0.5f);
					int numRows = Math.max(0,
							(int) (icon.getY() / icon.getH()) - 1);
					float cy = LauncherManager.MARGINHEIGHT * (numRows + 1)
							+ LauncherManager.APPHEIGHT * (numRows + 0.5f);
					icon.setPosition(cx, cy);
				}
				canvas.invalidate();
			} else {
				hitIcons = canvas.getTouchedShapes(curCoord.x, curCoord.y);
				// if hitting an icon
				if (hitIcons.size() > 0) {
					if (curTime - timeTouchDown < LONGPRESSTIMEOUT) {
						// LauncherManager.watchUp(activeApp.getSup());
						// } else {
						xacShape hitIcon = hitIcons.get(0);
						activeApp = htApps.get(hitIcon);
						LauncherManager.setAppExtension(htAppExtensions
								.get(activeApp));
						LauncherExtension watch = LauncherManager.getWatch();
						if (watch != null) {
							watch.showText(activeApp.getTitle());
						}
						if (activeApp != null) {
							View appView = activeApp.getViewGroup();
							if (appView != null) {
								try {
									layout.addView(appView);
								} catch (Exception e) {
									;
								}
								LauncherManager.resumeWatch();
							}
						}
					} else {
						isPreviewing = false;
						activeApp = null;
						sup = "";
					}
				}

			}
			break;
		}

		prevX = curCoord.x;
		prevY = curCoord.y;
	}

	@SuppressLint("NewApi")
	private void doCurtainTouch(MotionEvent event) {
		int action = event.getAction();

		PointerCoords curCoord = new PointerCoords();
		event.getPointerCoords(0, curCoord);

		Calendar calendar = Calendar.getInstance();
		long curTime = calendar.getTimeInMillis();

		switch (action) {
		case MotionEvent.ACTION_DOWN:
			distX = 0;
			distY = 0;
			xTouchDown = curCoord.x;
			yTouchDown = curCoord.y;
			break;
		case MotionEvent.ACTION_MOVE:
			distX += Math.abs(curCoord.x - xPrev);
			distY += Math.abs(curCoord.y - yPrev);
			break;
		case MotionEvent.ACTION_UP:

			if (Math.max(distX, distY) < TAPTHRS) {
				int watchConfig = xacAuthenticSenseFeatureMaker
						.calculateAuthentication();
				LauncherManager.updateWatchConfig(watchConfig);
				if (watchConfig != xacAuthenticSenseFeatureMaker.INTHEWILD) {
					layout.removeView(curtain);
					isLocked = false;
					lastUsageTime = curTime;
					unLockScreen();
				}
			} else {
				if (curCoord.x < xTouchDown && curCoord.y > yTouchDown) {
					// Log.d(LOGTAG, "swipe close");
					LauncherManager.updatePhoneGesture(EmailManager.SWIPECLOSE,
							curTime);
				} else if (curCoord.x > xTouchDown && curCoord.y < yTouchDown) {
					// Log.d(LOGTAG, "swipe open");
					LauncherManager.updatePhoneGesture(EmailManager.SWIPEOPEN,
							curTime);
				}
			}
			break;
		}

		xPrev = curCoord.x;
		yPrev = curCoord.y;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		switch (keyCode) {
		case KeyEvent.KEYCODE_VOLUME_UP:
			if (isLocked) {
				unLockScreen();
			} else {
				lockScreen();
			}
			break;
		case KeyEvent.KEYCODE_VOLUME_DOWN:
			if (!isLocked) {
				if (activeApp != null) {
					layout.removeView(activeApp.getViewGroup());
					activeApp = null;
					LauncherManager.setAppExtension(null);
					LauncherManager.resumeWatch();
				}
			}
			break;
		}

		return true;
	}

	@Override
	public void onAccuracyChanged(Sensor arg0, int arg1) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSensorChanged(SensorEvent event) {

		if (activeApp != null) {
			activeApp.doAccelerometer(event.values);
		} else {
			xacHandSenseFeatureMaker.updatePhoneAccel(event.values);
			xacHandSenseFeatureMaker.addPhoneFeatureEntry();

			xacTouchSenseFeatureMaker.updatePhoneAccel(event.values);
			xacTouchSenseFeatureMaker.addPhoneFeatureEntry();

			xacAuthenticSenseFeatureMaker.updatePhoneAccel(event.values);
			xacAuthenticSenseFeatureMaker.addPhoneFeatureEntry();
		}
	}

	public void switchApp(int appId) {
		if (activeApp != null) {
			layout.removeView(activeApp.getViewGroup());
			activeApp = null;
			LauncherManager.setAppExtension(null);
			LauncherManager.resumeWatch();
		}
		switch (appId) {
		case LauncherManager.CALL:
			activeApp = call;
			break;
		case LauncherManager.EMAIL:
			activeApp = email;
			break;
		case LauncherManager.READER:
			activeApp = reader;
			break;
		case LauncherManager.MAP:
			activeApp = map;
			break;
		}

		if (activeApp != null) {
			View appView = activeApp.getViewGroup();
			if (appView != null) {
				try {
					layout.addView(appView);
				} catch (Exception e) {
					;
				}
				LauncherManager.resumeWatch();
			}
		}
	}

}

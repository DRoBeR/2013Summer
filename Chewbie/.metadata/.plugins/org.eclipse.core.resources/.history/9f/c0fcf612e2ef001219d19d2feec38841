package me.xiangchen.app.duetapp.reader;

import me.xiangchen.app.duetapp.AppExtension;
import me.xiangchen.app.duetapp.call.CallManager;
import me.xiangchen.app.duetos.LauncherManager;
import me.xiangchen.app.duetos.R;
import me.xiangchen.technique.flipsense.xacFlipSenseFeatureMaker;
import me.xiangchen.technique.handsense.xacHandSenseFeatureMaker;
import me.xiangchen.technique.touchsense.xacTouchSenseFeatureMaker;
import me.xiangchen.ui.xacSketchCanvas;
import android.util.Log;

import com.sonyericsson.extras.liveware.aef.control.Control;
import com.sonyericsson.extras.liveware.extension.util.control.ControlTouchEvent;

public class ReaderExtenstion extends AppExtension {

	public final static String LOGTAG = "DuetOS";
	public final static int NUMTOOLPALLETES = 2;
	
	int idxToolPallete = 0;
	int[] bmpToolPallets = {R.drawable.tool_pallete_1, R.drawable.tool_pallete_2};
	
	@Override
	public void doResume() {
		showText("Reader");
	}

	@Override
	public void doTouch(ControlTouchEvent event) {
		if (event.getAction() == Control.Intents.TOUCH_ACTION_PRESS) {
			int width = getWidth();
			int height = getHeight();
			float x = event.getX();
			float y = event.getY();

			if (x < width / 2 && y < height / 2) {
				// Log.d(LOGTAG, "Pen");
				ReaderManager.setTool(xacSketchCanvas.PEN);
			} else if (x > width / 2 && y < height / 2) {
				// Log.d(LOGTAG, "Highlighter");
				ReaderManager.setTool(xacSketchCanvas.HIGHLIGHTER);
			} else if (x > width / 2 && y > height / 2) {
				// Log.d(LOGTAG, "Redo");
				ReaderManager.redo();
			} else if (x < width / 2 && y > height / 2) {
				// Log.d(LOGTAG, "Undo");
				ReaderManager.undo();
			}
		}
	}

	@Override
	public void doSwipe(int direction) {
		switch (direction) {
		case Control.Intents.SWIPE_DIRECTION_LEFT:
			idxToolPallete = (idxToolPallete + NUMTOOLPALLETES - 1) % NUMTOOLPALLETES;
			updateVisual(LauncherManager.getBitmap(bmpToolPallets[idxToolPallete]));
			break;
		case Control.Intents.SWIPE_DIRECTION_RIGHT:
			idxToolPallete = (idxToolPallete + 1) % NUMTOOLPALLETES;
			CallManager.playNextVoiceMail();
			break;
		}
	}
	
	@Override
	public void doAccelerometer(float[] values) {
		xacHandSenseFeatureMaker.updateWatchAccel(values);
		xacHandSenseFeatureMaker.addWatchFeatureEntry();

		xacTouchSenseFeatureMaker.updateWatchAccel(values);
		xacTouchSenseFeatureMaker.addWatchFeatureEntry();

		xacFlipSenseFeatureMaker.updateWatchAccel(values);
		xacFlipSenseFeatureMaker.addWatchFeatureEntry();
	}
}

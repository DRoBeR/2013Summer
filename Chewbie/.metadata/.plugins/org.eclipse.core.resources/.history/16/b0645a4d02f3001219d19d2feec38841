package me.xiangchen.app.duetapp.reader;

import java.util.ArrayList;

import me.xiangchen.app.duetapp.AppExtension;
import me.xiangchen.app.duetos.LauncherManager;
import me.xiangchen.app.duetos.R;
import me.xiangchen.technique.doubleflip.xacAuthenticSenseFeatureMaker;
import me.xiangchen.technique.flipsense.xacFlipSenseFeatureMaker;
import me.xiangchen.technique.handsense.xacHandSenseFeatureMaker;
import me.xiangchen.technique.touchsense.xacTouchSenseFeatureMaker;
import me.xiangchen.ui.xacSketchCanvas;

import com.sonyericsson.extras.liveware.aef.control.Control;
import com.sonyericsson.extras.liveware.extension.util.control.ControlTouchEvent;

public class ReaderExtenstion extends AppExtension {

	public final static String LOGTAG = "DuetOS";
	public final static int NUMTOOLPALLETES = 2;
	public final static int CLIPBOARD = 0;
	public final static int MAINSCREEN = 1;
	public final static int SHARESCREEN = 2;
	public final static int NUMTEXTPERSCREEN = 3;

	int idxToolPallete = 0;
	int[] bmpToolPallets = { R.drawable.tool_pallete_1,
			R.drawable.tool_pallete_2 };

	int idxTextOptionScreen = 1;
	String selectedText = "";

	ArrayList<String> clipboard;
	int idxClipboard = 0;

	public ReaderExtenstion() {
		ReaderManager.setWatch(this);
	}

	@Override
	public void doResume() {
		showText("Reader");
	}

	@Override
	public void doTouch(ControlTouchEvent event) {
		if (LauncherManager.getWatchConfig() == xacAuthenticSenseFeatureMaker.LEFTINNERWRIST) {
			if (event.getAction() == Control.Intents.TOUCH_ACTION_PRESS) {
				int width = getWidth();
				int height = getHeight();
				float x = event.getX();
				float y = event.getY();

				switch (idxToolPallete) {
				case 0:
					if (x < width / 2 && y < height / 2) {
						ReaderManager.setTool(xacSketchCanvas.PEN);
					} else if (x > width / 2 && y < height / 2) {
						ReaderManager.setTool(xacSketchCanvas.HIGHLIGHTER);
					} else if (x > width / 2 && y > height / 2) {
						ReaderManager.redo();
					} else if (x < width / 2 && y > height / 2) {
						ReaderManager.undo();
					}
					break;
				case 1:
					if (x < width / 2 && y < height / 2) {
						ReaderManager.decrTextSize();
					} else if (x > width / 2 && y < height / 2) {
						ReaderManager.incrTextSize();
					} else if (x > width / 2 && y > height / 2) {
						ReaderManager.incrBrightness();
					} else if (x < width / 2 && y > height / 2) {
						ReaderManager.decrBrightness();
					}
					break;
				}
			}
		}
	}

	@Override
	public void doSwipe(int direction) {
		if (LauncherManager.getWatchConfig() == xacAuthenticSenseFeatureMaker.LEFTINNERWRIST) {
			switch (direction) {
			case Control.Intents.SWIPE_DIRECTION_LEFT:
				idxToolPallete = (idxToolPallete + NUMTOOLPALLETES - 1)
						% NUMTOOLPALLETES;
				updateWatchVisual(
						LauncherManager
								.getBitmap(bmpToolPallets[idxToolPallete]),
						true);
				break;
			case Control.Intents.SWIPE_DIRECTION_RIGHT:
				idxToolPallete = (idxToolPallete + 1) % NUMTOOLPALLETES;
				updateWatchVisual(
						LauncherManager
								.getBitmap(bmpToolPallets[idxToolPallete]),
						true);
				break;
			}
		} else if (LauncherManager.getWatchConfig() == xacAuthenticSenseFeatureMaker.LEFTBACKWRIST) {
			switch (direction) {
			case Control.Intents.SWIPE_DIRECTION_LEFT:
				idxTextOptionScreen++;
				idxTextOptionScreen = Math.max(0, idxTextOptionScreen);
				break;
			case Control.Intents.SWIPE_DIRECTION_RIGHT:
				idxTextOptionScreen--;
				idxTextOptionScreen = Math.min(3, idxTextOptionScreen);
				break;
			case Control.Intents.SWIPE_DIRECTION_UP:
				if (idxTextOptionScreen == CLIPBOARD) {
					idxClipboard -= NUMTEXTPERSCREEN;
					showClipboard();
				}
				break;
			case Control.Intents.SWIPE_DIRECTION_DOWN:
				if (idxTextOptionScreen == CLIPBOARD) {
					idxClipboard += NUMTEXTPERSCREEN;
					showClipboard();
				}
				break;
			}
			updateTextOptionScreen(idxTextOptionScreen);
		}
	}

	private void updateTextOptionScreen(int idx) {
		switch (idx) {
		case CLIPBOARD:
			showClipboard();
			break;
		case MAINSCREEN:
			showTextOption();
			break;
		case SHARESCREEN:
			updateWatchVisual(LauncherManager.getBitmap(R.drawable.share), true);
			break;
		}
	}

	public void showToolPallete() {
		updateWatchVisual(
				LauncherManager.getBitmap(bmpToolPallets[idxToolPallete]), true);
	}

	@Override
	public void doAccelerometer(float[] values) {
		xacHandSenseFeatureMaker.updateWatchAccel(values);
		xacHandSenseFeatureMaker.addWatchFeatureEntry();

		xacTouchSenseFeatureMaker.updateWatchAccel(values);
		xacTouchSenseFeatureMaker.addWatchFeatureEntry();

		xacFlipSenseFeatureMaker.updateWatchAccel(values);
		xacFlipSenseFeatureMaker.addWatchFeatureEntry();

		xacAuthenticSenseFeatureMaker.updateWatchAccel(values);
		xacAuthenticSenseFeatureMaker.addWatchFeatureEntry();
	}

	private void showClipboard() {
		String shownText = "";
		for (int i = 0; i < NUMTEXTPERSCREEN && idxClipboard + i >= 0
				&& idxClipboard + i < clipboard.size(); i++) {
			String clippedText = clipboard.get(idxClipboard + i);
			int lengthSubText = Math.min(clippedText.length(), 10);
			shownText += (i + idxClipboard) + ". "
					+ clippedText.substring(0, lengthSubText) + "\n";
		}
		showText(shownText);
	}

	private void showDictionary() {
		int lengthSubText = Math.min(selectedText.length(), 15);
		String subText = selectedText.substring(0, lengthSubText)
				+ (selectedText.length() == lengthSubText ? "" : "...");
		String dicEntry = "Dictionary explanation of this word or sentence."
				+ "Blah blah blah";
		showText(subText + "\n\n" + dicEntry);
	}

	private void showTextOption() {
		int lengthSubText = Math.min(selectedText.length(), 15);
		String subText = selectedText.substring(0, lengthSubText)
				+ (selectedText.length() == lengthSubText ? "" : "...");
		String option1 = ">> Add to clipboard";
		String option2 = "<< Share this text";

		showText(subText + "\n\n" + option1 + "\n" + option2);
	}

	public void showTextOption(String text) {
		selectedText = text;
		showTextOption();
	}
}
